/*
 * TimeSlider.java
 *
 * Created on September 25, 2005, 7:10 PM
 */

package verifier;

import runtime.Debug;
import runtime.DomainContext;

/**
 *
 * @author  u3958283
 */
public class TimeSlider extends javax.swing.JPanel {
	
	private DomainContext context = null ;
	
	/** Creates new form BeanForm */
	public TimeSlider() {
		initComponents();
		timeFactorLabel.setText("Factor:"+ getTimeFactor() + "X" ) ;
		TimeChanger tc = new TimeChanger() ;
	}
	
	public void initialise(DomainContext d) {
		this.context = d ;
		
	}
	
	public void refreshTime() {
		if ( context != null )
			timer.setText( " " + context.getTimeObject().getTimeMs() + " ") ;
	}
	
	
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        timeFactorLabel = new javax.swing.JLabel();
        timeSlider = new javax.swing.JSlider();
        sep1 = new javax.swing.JSeparator();
        lemTimeLabel = new javax.swing.JLabel();
        timer = new javax.swing.JTextField();

        timeFactorLabel.setText("Factor :      ");
        add(timeFactorLabel);

        timeSlider.setMinimum(1);
        timeSlider.setValue(10);
        timeSlider.setPreferredSize(new java.awt.Dimension(100, 16));
        timeSlider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                timeSliderMouseClicked(evt);
            }
        });

        add(timeSlider);

        sep1.setForeground(new java.awt.Color(51, 51, 51));
        sep1.setPreferredSize(new java.awt.Dimension(10, 0));
        add(sep1);

        lemTimeLabel.setText("lem time:");
        add(lemTimeLabel);

        timer.setEditable(false);
        timer.setForeground(new java.awt.Color(0, 0, 0));
        timer.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        timer.setPreferredSize(new java.awt.Dimension(80, 19));
        timer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timerActionPerformed(evt);
            }
        });

        add(timer);

    }
    // </editor-fold>//GEN-END:initComponents

	private void timerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timerActionPerformed
// TODO add your handling code here:
	}//GEN-LAST:event_timerActionPerformed
	
	public double getTimeFactor() {
		double value = (double) timeSlider.getValue() ;
		double timeFactor = 0.0 ;
		if ( value < 10)
			timeFactor = (1/ Math.pow( Math.abs(10 - value) , 2 ) ) ;
		else 
			timeFactor = value ; 
		
		return Math.round( (100*timeFactor) ) / 100.0   ; 
	}
	
	private void timeSliderMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_timeSliderMouseClicked
// TODO add your handling code here:
		context.getTimeObject().setTimeFactor( getTimeFactor() ) ;
		timeFactorLabel.setText("Factor: " + getTimeFactor() + "X" ) ;
		refreshTime() ;
	}//GEN-LAST:event_timeSliderMouseClicked
	
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lemTimeLabel;
    private javax.swing.JSeparator sep1;
    private javax.swing.JLabel timeFactorLabel;
    private javax.swing.JSlider timeSlider;
    private javax.swing.JTextField timer;
    // End of variables declaration//GEN-END:variables
	
	class TimeChanger extends Thread {
		public TimeChanger() {
			start() ;
		}
		
		public void run() {
			while ( true ) {
				if ( context != null && (context.getDebugObject().getRuntimeState()== Debug.RUNNING))
					refreshTime() ;
				try {
					sleep(100) ;
				} catch(Exception e) {}
			}
		}
	}
	
}
