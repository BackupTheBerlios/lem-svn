/*
 * ModelTreePanel.java
 *
 * Created on April 24, 2005, 3:25 PM
 *
 * Copyright (C) 2005 Steven Ring
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301,
 * USA.
 */

package verifier;

import java.awt.event.MouseEvent;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.DefaultTreeSelectionModel;
import org.jdns.xtuml.metamodel.Model;

/**
 * Displays the model tree for an executing scenario
 * @author  Steven Ring
 */
public class ModelTreePanel extends javax.swing.JPanel {
    private JPopupMenu contextMenu = new JPopupMenu();
    private Object currentContextObject = null;
    private Eleminator eleminator ;
    
    /**
     * Creates new form ModelTreePanel
     * @param m The associated Model
     * @param inEleminator The associated instance of eLEMinator
     */
    public ModelTreePanel(Model m, Eleminator inEleminator) {
        eleminator = inEleminator;
        initComponents();
        modelTree.setSelectionModel(new DefaultTreeSelectionModel());
        ModelTreeNode modelTreeNode = new ModelTreeNode( m , eleminator) ;
        modelTree.setModel( new DefaultTreeModel( modelTreeNode ));
        modelTree.setSelectionInterval(0,0);
        if (modelTree.getSelectionPath() != null)
            displayDescription(modelTree.getSelectionPath().getLastPathComponent());
        SplitPanel.setDividerLocation(175);
        CustomTreeRenderer render = new CustomTreeRenderer();
        modelTree.setCellRenderer(render);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        SplitPanel = new javax.swing.JSplitPane();
        treeScrollPane = new javax.swing.JScrollPane();
        modelTree = new javax.swing.JTree();
        descriptionScrollPane = new javax.swing.JScrollPane();
        descriptionArea = new javax.swing.JTextPane();

        setLayout(new java.awt.BorderLayout());

        modelTree.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                modelTreePropertyChange(evt);
            }
        });
        modelTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                modelTreeMouseClicked(evt);
            }
        });

        treeScrollPane.setViewportView(modelTree);

        SplitPanel.setLeftComponent(treeScrollPane);

        descriptionArea.setEditable(false);
        descriptionArea.setEditorKit(descriptionArea.getEditorKit());
        descriptionScrollPane.setViewportView(descriptionArea);

        SplitPanel.setRightComponent(descriptionScrollPane);

        add(SplitPanel, java.awt.BorderLayout.CENTER);

    }//GEN-END:initComponents
    
    /**
     * Displays the model tree when an element is selected (with a mouse click)
     * @param evt The assocated mouse click event
     */
    private void modelTreeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_modelTreeMouseClicked
        
        if (MouseEvent.BUTTON3 == evt.getButton()||MouseEvent.BUTTON2 == evt.getButton()) {
            try{
                Object p = modelTree.getClosestPathForLocation(evt.getX(), evt.getY()).getLastPathComponent();
                if (p instanceof AbstractDescriptionNode){
                    AbstractDescriptionNode adn = (AbstractDescriptionNode)p;
                    currentContextObject = p;
                    contextMenu = adn.getContextMenu();
                    JMenuItem desc = new JMenuItem();
                    desc.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            DescriptionMenuClicked(evt);
                        }
                    });
                    desc.setText("Description");
                    contextMenu.add(desc);
                    contextMenu.show( this, evt.getX()-treeScrollPane.getHorizontalScrollBar().getValue(), evt.getY()-treeScrollPane.getVerticalScrollBar().getValue() );
                }
            } catch(Exception e){System.out.println(e);}
        } else {
            displayDescription(modelTree.getSelectionPath().getLastPathComponent());
        }
        
    }//GEN-LAST:event_modelTreeMouseClicked
    
    /**
     * Display the description of the current context object
     * @param evt The associated action event
     */
    private void DescriptionMenuClicked(java.awt.event.ActionEvent evt) {
        displayDescription(currentContextObject);
        contextMenu.setVisible(false);
        currentContextObject=null;
    }
    
    /**
     * Update the context tree
     * @param evt The associated PropertyChangeEvent
     */
    private void modelTreePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_modelTreePropertyChange
        try{
            displayDescription(modelTree.getSelectionPath().getLastPathComponent());
        } catch(Exception e){}
    }//GEN-LAST:event_modelTreePropertyChange
   
    /**
     * Display the description of the selected object in a styled document
     * @param p The selected object
     */
    public void displayDescription(Object p) {
        StyledDocument doc = null, dynamicDoc = null ;
        try{
            
            if (p instanceof AbstractDescriptionNode){
                AbstractDescriptionNode ADN = (AbstractDescriptionNode)p;
                doc = ADN.getStyledDocument();
                try {
                    descriptionArea.getDocument().remove( 0 , descriptionArea.getDocument().getLength() ) ;
                    for ( int i = 0 ; i < doc.getLength() ; i++ ) {
                        descriptionArea.getDocument().insertString(descriptionArea.getDocument().getLength() ,doc.getStyledElement(i).getContent() + "\n", doc.getStyledElement(i).getAttributeSet()) ;
                    }
                }
                
                catch(Exception e) {}
            }
        }
        
        catch(NullPointerException e) {
        }
        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSplitPane SplitPanel;
    private javax.swing.JTextPane descriptionArea;
    private javax.swing.JScrollPane descriptionScrollPane;
    private javax.swing.JTree modelTree;
    private javax.swing.JScrollPane treeScrollPane;
    // End of variables declaration//GEN-END:variables
    
}
