/*
 * GenerateClassDiagramDialog.java
 *
 * Copyright (C) 2005 Steven Michael Ring
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301,
 * USA.
 */

package verifier;

import java.awt.Component;
import java.awt.Frame;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.Iterator;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import metamodel.Domain;
import metamodel.Model;
import metamodel.Subsystem;

/**
 * Dialog for generating class diagrams from LEM models.
 *
 * @author Toshio Nakamura
 */
public class GenerateClassDiagramDialog extends javax.swing.JDialog {
	
	/**
	 * Handle to the displayed dialog.
	 */
	private static GenerateClassDiagramDialog dialog = null;
	
	/**
	 * The model that this dialog is associated with
	 * @todo should this be static?
	 * @todo remove debugging println() statements
	 */
	private Model model;
	
	/**
	 * The currently selected Domain
	 */
	private Domain selectedDomain;
	
	/**
	 * The currently selected LEM Class
	 */
	private Subsystem selectedSubsystem;
	
	/** Creates new form GenerateClassDiagramDialog */
	public GenerateClassDiagramDialog(java.awt.Frame parent, boolean modal, Model m) {
		super(parent, modal);
		model = m;
		initComponents();
	}
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
  // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
  private void initComponents() {
    java.awt.GridBagConstraints gridBagConstraints;

    domainLabel = new javax.swing.JLabel();
    destinationLabel = new javax.swing.JLabel();
    filenameField = new javax.swing.JTextField();
    generateButton = new javax.swing.JButton();
    cancelButton = new javax.swing.JButton();
    domainList = new javax.swing.JComboBox();
    classLabel = new javax.swing.JLabel();
    subsystemList = new javax.swing.JComboBox();

    getContentPane().setLayout(new java.awt.GridBagLayout());

    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    addWindowListener(new java.awt.event.WindowAdapter() {
      public void windowOpened(java.awt.event.WindowEvent evt) {
        formWindowOpened(evt);
      }
    });

    domainLabel.setText("Domain:");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    getContentPane().add(domainLabel, gridBagConstraints);

    destinationLabel.setText("Output Filename:");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    getContentPane().add(destinationLabel, gridBagConstraints);

    filenameField.setText("classes.png");
    filenameField.setPreferredSize(new java.awt.Dimension(300, 20));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
    gridBagConstraints.weightx = 1.0;
    getContentPane().add(filenameField, gridBagConstraints);

    generateButton.setMnemonic('G');
    generateButton.setText("Generate");
    generateButton.setActionCommand("generate");
    generateButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        generateButtonActionPerformed(evt);
      }
    });

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 4;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
    getContentPane().add(generateButton, gridBagConstraints);

    cancelButton.setMnemonic('C');
    cancelButton.setText("Cancel");
    cancelButton.setActionCommand("cancel");
    cancelButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        cancelButtonActionPerformed(evt);
      }
    });

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 4;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
    getContentPane().add(cancelButton, gridBagConstraints);

    domainList.setPreferredSize(new java.awt.Dimension(300, 20));
    domainList.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        domainListActionPerformed(evt);
      }
    });

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
    getContentPane().add(domainList, gridBagConstraints);

    classLabel.setText("Subsystem:");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    getContentPane().add(classLabel, gridBagConstraints);

    subsystemList.setPreferredSize(new java.awt.Dimension(300, 20));
    subsystemList.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        subsystemListActionPerformed(evt);
      }
    });

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    getContentPane().add(subsystemList, gridBagConstraints);

    pack();
  }
  // </editor-fold>//GEN-END:initComponents
	
	private void domainListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_domainListActionPerformed
		// Update the Domain and Subsystem combo boxes
		JComboBox cb = (JComboBox)evt.getSource();
		selectedDomain = model.getDomain( (String)cb.getSelectedItem() );
		updateSubsystemList( selectedDomain );
	}//GEN-LAST:event_domainListActionPerformed
	
	private void subsystemListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subsystemListActionPerformed
		// Update the selection
		JComboBox cb = (JComboBox)evt.getSource();
		selectedSubsystem = selectedDomain.getSubsystem( (String)cb.getSelectedItem() );
	}//GEN-LAST:event_subsystemListActionPerformed
	
	private void generateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateButtonActionPerformed
		if ("generate".equals( evt.getActionCommand() )) {
			// Fail if no filename specified
			if (filenameField.getText() == "") {
				JOptionPane.showMessageDialog( this, "No output filename specified", "Error",
						JOptionPane.ERROR_MESSAGE );
			}
			// 'Normal' case
			else {
				// The user has selected all the classes in the domain
				if (subsystemList.getSelectedIndex() == 0) {
					System.err.println( "All classes in domain" );
					String dotCode =
							ClassWriter.dumpDot( selectedDomain, selectedDomain.getClasses().values() );
					// System.err.println( dotCode );
				}
				// The user has selected a specific subsystem
				else {
					System.err.println( "Specific subsystem" );
					String dotCode =
							ClassWriter.dumpDot( selectedDomain, selectedSubsystem.getClasses().values() );
					// System.err.println( dotCode );
				}
			}
		}
		this.dispose();
	}//GEN-LAST:event_generateButtonActionPerformed
	
	/**
	 * Display the dialog
	 *
	 * @param parent the component that this dialog belongs do
	 * @param model the model for which the dialog is acting as a selector
	 */
	public static void showDialog(Component parent, Model m) {
		// Handle the 'no model loaded' case
		if (m == null) {
			JOptionPane.showMessageDialog(parent, "No model loaded.", "Error",
					JOptionPane.INFORMATION_MESSAGE );
		} else { // 'Normal' case
			Frame frame = JOptionPane.getFrameForComponent( parent );
			dialog = new GenerateClassDiagramDialog( frame, true, m );
			dialog.setVisible( true );
		}
	}
	
	private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
		
// Initialise the Domains combo box
		Iterator domainIter = model.getDomains().values().iterator();
		while (domainIter.hasNext()) {
			domainList.addItem( ((Domain)domainIter.next()).getName() );
		}
		domainList.setSelectedIndex( 0 );
		selectedDomain = model.getDomain( (String)domainList.getSelectedItem() );
		
		// Initialise the Subsystem combo box
		updateSubsystemList( selectedDomain );
	}//GEN-LAST:event_formWindowOpened
	
	/**
	 * Updates the Subsystem combo box to display the child subsystems of a single
	 * parent domain.
	 *
	 * @param parent the parent Domain
	 * @todo only list classes with state machines
	 * @todo this function may not be needed - may be possible to access
	 * statecharts directly
	 * @todo does Java support an 'or else'-style construct?
	 * @todo Recode to use Exceptions?
	 */
	private void updateSubsystemList( Domain parent ) {
		subsystemList.removeAllItems();
		// Handle 'domainless' models
		if (parent == null) {
			subsystemList.addItem( "<None>" );
			subsystemList.setSelectedIndex( 0 );
			selectedSubsystem = null;
		} else {
			Iterator subsystemIter = parent.getSubsystems().values().iterator();
			// Handle domains with no subsystems
			if (subsystemIter.hasNext() == false) {
				subsystemList.addItem( "<None>" );
				subsystemList.setSelectedIndex( 0 );
				selectedSubsystem = null;
			} else { // 'Normal' case
				// A special-case 'all classes in domain' option
				subsystemList.addItem( "<All>" );
				metamodel.Subsystem s;
				while (subsystemIter.hasNext()) {
					s = (metamodel.Subsystem)subsystemIter.next();
					subsystemList.addItem( s.getName() );
				}
			}
			subsystemList.setSelectedIndex( 0 );
			selectedSubsystem = parent.getSubsystem( (String)subsystemList.getSelectedItem() );
		}
	}
	
	private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
		if ("cancel".equals( evt.getActionCommand() )) {
			this.dispose();
		}
	}//GEN-LAST:event_cancelButtonActionPerformed
	
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton cancelButton;
  private javax.swing.JLabel classLabel;
  private javax.swing.JLabel destinationLabel;
  private javax.swing.JLabel domainLabel;
  private javax.swing.JComboBox domainList;
  private javax.swing.JTextField filenameField;
  private javax.swing.JButton generateButton;
  private javax.swing.JComboBox subsystemList;
  // End of variables declaration//GEN-END:variables
	
}
