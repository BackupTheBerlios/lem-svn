/*
 * GenerateClassDiagramDialog.java
 *
 * Copyright (C) 2005 Steven Michael Ring
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301,
 * USA.
 */

package verifier;

import java.awt.Component;
import java.awt.Frame;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import javax.swing.DefaultListModel;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import metamodel.Domain;
import metamodel.Model;
import metamodel.Subsystem;

/**
 * Dialog for generating class diagrams from LEM models.
 *
 * @author Toshio Nakamura
 */
public class GenerateClassDiagramDialog extends javax.swing.JDialog {
	
	/**
	 * Handle to the displayed dialog.
	 */
	private static GenerateClassDiagramDialog dialog = null;
	
	/**
	 * The model that this dialog is associated with
	 * @todo should this be static?
	 * @todo remove debugging println() statements
	 */
	private Model model;
	
	/**
	 * The currently selected Domain
	 */
	private Domain selectedDomain;
	
	/**
	 * Whether or not a single subsystem has been selected
	 */
	boolean isSelectedSubsystem = false;
	
	/**
	 * The currently selected LEM Subsystem. Only relevant if isSubsystemSelected
	 * is true, undefined otherwise
	 */
	private Subsystem selectedSubsystem;
	
	/** Creates new form GenerateClassDiagramDialog */
	public GenerateClassDiagramDialog(java.awt.Frame parent, boolean modal, Model m) {
		super(parent, modal);
		model = m;
		initComponents();
	}
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        domainLabel = new javax.swing.JLabel();
        destinationLabel = new javax.swing.JLabel();
        filenameField = new javax.swing.JTextField();
        generateButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        domainList = new javax.swing.JComboBox();
        classLabel = new javax.swing.JLabel();
        subsystemList = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        classList = new javax.swing.JList();
        classLabel1 = new javax.swing.JLabel();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        domainLabel.setText("Domain:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(domainLabel, gridBagConstraints);

        destinationLabel.setText("Output Filename:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(destinationLabel, gridBagConstraints);

        filenameField.setText("classes.png");
        filenameField.setPreferredSize(new java.awt.Dimension(300, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(filenameField, gridBagConstraints);

        generateButton.setMnemonic('G');
        generateButton.setText("Generate");
        generateButton.setActionCommand("generate");
        generateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        getContentPane().add(generateButton, gridBagConstraints);

        cancelButton.setMnemonic('C');
        cancelButton.setText("Cancel");
        cancelButton.setActionCommand("cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        getContentPane().add(cancelButton, gridBagConstraints);

        domainList.setPreferredSize(new java.awt.Dimension(300, 20));
        domainList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                domainListActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        getContentPane().add(domainList, gridBagConstraints);

        classLabel.setText("Subsystem:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(classLabel, gridBagConstraints);

        subsystemList.setPreferredSize(new java.awt.Dimension(300, 20));
        subsystemList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subsystemListActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        getContentPane().add(subsystemList, gridBagConstraints);

        jScrollPane1.setViewportView(classList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 50;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jScrollPane1, gridBagConstraints);

        classLabel1.setText("Class List:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(classLabel1, gridBagConstraints);

        pack();
    }
    // </editor-fold>//GEN-END:initComponents
	
	private void domainListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_domainListActionPerformed
		// Update the Domain and Subsystem combo boxes
		JComboBox cb = (JComboBox)evt.getSource();
		selectedDomain = model.getDomain( (String)cb.getSelectedItem() );
		updateSubsystemList();
	}//GEN-LAST:event_domainListActionPerformed
	
	private void subsystemListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subsystemListActionPerformed
		// Update the selection
		JComboBox cb = (JComboBox)evt.getSource();
		
		Subsystem s = selectedDomain.getSubsystem( (String)cb.getSelectedItem() );
		if (s == null) {
			selectedSubsystem = null;
			isSelectedSubsystem = false;
		} else {
			isSelectedSubsystem = true;
			selectedSubsystem = selectedDomain.getSubsystem( (String)cb.getSelectedItem() );
		}
		updateClassList();
	}//GEN-LAST:event_subsystemListActionPerformed
	
	private void generateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateButtonActionPerformed
		if ("generate".equals( evt.getActionCommand() )) {
			// Fail if no filename specified
			if (filenameField.getText().equals("")) {
				JOptionPane.showMessageDialog( this, "No output filename specified", "Error",
						JOptionPane.ERROR_MESSAGE );
			} else { // 'Normal' case
				String dotCode = null;
				String javaSpec = null;
				
				ArrayList classes = new ArrayList();
				int i;
				int[] selected = classList.getSelectedIndices();
				if (selected.length == 0) {
					JOptionPane.showMessageDialog( this, "No classes selected", "Error",
							JOptionPane.ERROR_MESSAGE );
				} else {
					// Get the selected classes
					for (i = 0; i < selected.length; i++) {
						//System.err.println( (String)(classList.getModel().getElementAt( selected[i] ) ) );
						classes.add( selectedDomain.getClass(
								(String)(classList.getModel().getElementAt( selected[i] ) ) ) );
					}
					// START DEBUG
					for ( Iterator it = classes.iterator(); it.hasNext(); ) {
						metamodel.Class umlclass = (metamodel.Class) it.next();
//						System.err.println( umlclass.getName() );
//						System.err.println( umlclass.dumpUMLGraph(false) );
					}
					// STOP DEBUG                  
					dotCode = ClassWriter.dumpUMLGraph( selectedDomain, classes );
					System.err.println(dotCode);
					try {
						DotWriter.dotToPNG( dotCode, filenameField.getText() );
						JOptionPane.showMessageDialog( this, "Diagram generated successfully.", "Success!",
								JOptionPane.INFORMATION_MESSAGE );
					} catch (IOException ioe) {
						JOptionPane.showMessageDialog( this, ioe.toString(), "Error",
								JOptionPane.ERROR_MESSAGE );
					}
					this.dispose();
				}
			}
		}
	}//GEN-LAST:event_generateButtonActionPerformed
	
	/**
	 * Display the dialog
	 *
	 * @param parent the component that this dialog belongs do
	 * @param model the model for which the dialog is acting as a selector
	 */
	public static void showDialog(Component parent, Model m) {
		// Handle the 'no model loaded' case
		if (m == null) {
			JOptionPane.showMessageDialog(parent, "No model loaded.", "Error",
					JOptionPane.INFORMATION_MESSAGE );
		} else { // 'Normal' case
			Frame frame = JOptionPane.getFrameForComponent( parent );
			dialog = new GenerateClassDiagramDialog( frame, true, m );
			dialog.setVisible( true );
		}
	}
	
	private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
		
		// Initialise the Domains combo box
		Iterator domainIter = model.getDomains().values().iterator();
		while (domainIter.hasNext()) {
			domainList.addItem( ((Domain)domainIter.next()).getName() );
		}
		domainList.setSelectedIndex( 0 );
		selectedDomain = model.getDomain( (String)domainList.getSelectedItem() );
		
		// Initialise the Subsystem combo box
		updateSubsystemList();
		
		// Initialise the Class List list box
		//updateClassList();
	}//GEN-LAST:event_formWindowOpened
	
	/**
	 * Updates the Subsystem combo box to display the child subsystems of a single
	 * parent domain.
	 *
	 * @param parent the parent Domain
	 * @todo does Java support an 'or else'-style construct?
	 * @todo Recode to use Exceptions?
	 */
	private void updateSubsystemList() {
		subsystemList.removeAllItems();
		// Handle 'domainless' models
		if (selectedDomain == null) {
			subsystemList.addItem( "<None>" );
		} else {
			Iterator subsystemIter = selectedDomain.getSubsystems().values().iterator();
			// Handle domains with no subsystems
			if (subsystemIter.hasNext() == false) {
				subsystemList.addItem( "<None>" );
			} else { // 'Normal' case
				// A special-case 'all classes in domain' option
				subsystemList.addItem( "<All>" );
				metamodel.Subsystem s;
				while (subsystemIter.hasNext()) {
					s = (metamodel.Subsystem)subsystemIter.next();
					subsystemList.addItem( s.getName() );
				}
			}
		}
		subsystemList.setSelectedIndex( 0 );
		isSelectedSubsystem = false;
		selectedSubsystem = null;
	}
	
	/**
	 * Updates the Class List listbox to display:
	 *   - All of the classes in a domain, if all subsystems are selected (the
	 *     '<All>' option in the Subsystem combo box)
	 *   - The classes in a single subsystem, if a single subsystem is selected
	 *
	 * @param parent the parent Domain
	 * @todo currently a code stub only
	 * @todo select all classes by default
	 */
	private void updateClassList() {
		DefaultListModel listModel = new DefaultListModel();
		
		if (isSelectedSubsystem == false) {
			Iterator classIter = selectedDomain.getClasses().values().iterator();
			while (classIter.hasNext()) {
				listModel.addElement( ( (metamodel.Class)( classIter.next() )).getName() );
			}
		}
		// List only those classes in the selected subsystem
		else {
			Iterator classIter = selectedSubsystem.getClasses().values().iterator();
			while (classIter.hasNext()) {
				listModel.addElement( ( (metamodel.Class)( classIter.next() )).getName() );
			}
		}
		classList.setModel( listModel );
		
		// Include all classes in the list by default
		classList.setSelectionInterval(0, classList.getModel().getSize() - 1 );
	}
	
	private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
		if ("cancel".equals( evt.getActionCommand() )) {
			this.dispose();
		}
	}//GEN-LAST:event_cancelButtonActionPerformed
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel classLabel;
    private javax.swing.JLabel classLabel1;
    private javax.swing.JList classList;
    private javax.swing.JLabel destinationLabel;
    private javax.swing.JLabel domainLabel;
    private javax.swing.JComboBox domainList;
    private javax.swing.JTextField filenameField;
    private javax.swing.JButton generateButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox subsystemList;
    // End of variables declaration//GEN-END:variables
	
}
