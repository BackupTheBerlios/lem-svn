/*
 * thisPanel2.java
 *
 * Created on September 16, 2005, 4:44 PM
 *
 * Copyright (C) 2005 Shokouhmand Torabi
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301,
 * USA.
 */

package verifier;

import java.awt.event.MouseEvent;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.JTextPane;
import javax.swing.tree.DefaultTreeModel;

/**
 *
 * @author  Shokouhmand Torabi
 */
public class ContextTree extends javax.swing.JTree {
	
	/** the source context of this panel*/
	private runtime.Context context ;
	/** the description panel into which display the information
	 *about objects, instances etc.*/
	private JTextPane descriptionPane ;
	private JPopupMenu contextMenu = new JPopupMenu();
	private Object currentContextObject = null;
	
	private LoggerFrame frame ;
	
	
	/** Creates new form BeanForm */
	public ContextTree() {
		initComponents();		
	}
	
	public void init(runtime.Context c,  LoggerFrame frame) {
		this.context = c ;
		this.frame = frame ;
		ScenarioContextNode scenarioNode = new ScenarioContextNode( context,  frame) ;
		this.setModel( new DefaultTreeModel( scenarioNode ));
		CustomTreeRenderer render = new CustomTreeRenderer();
		this.setCellRenderer(render);
	}
	
	/** Set a descriptionPane for this panel to write information into */
	public void setDescriptionPane(JTextPane descriptionPane) {
		this.descriptionPane = descriptionPane;
	}
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    private void initComponents() {//GEN-BEGIN:initComponents

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

    }//GEN-END:initComponents

	private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
// TODO add your handling code here:
		if (MouseEvent.BUTTON3 == evt.getButton()||MouseEvent.BUTTON2 == evt.getButton()) {
			try{
				Object p = this.getClosestPathForLocation(evt.getX(), evt.getY()).getLastPathComponent();
				if (p instanceof AbstractDescriptionNode){
					AbstractDescriptionNode adn = (AbstractDescriptionNode)p;
					currentContextObject = p;
					contextMenu = adn.getContextMenu();
					JMenuItem desc = new JMenuItem();
					desc.addActionListener(new java.awt.event.ActionListener() {
						public void actionPerformed(java.awt.event.ActionEvent evt) {
							DescriptionMenuClicked(evt);
						}
					});
					desc.setText("Description");
					contextMenu.add(desc);
					contextMenu.show( this, evt.getX(), evt.getY() );
				}
			} catch(Exception e){System.out.println(e);}
		} else {
			if (this.getSelectionPath() != null)
				displayDescription(this.getSelectionPath().getLastPathComponent());
		}
	}//GEN-LAST:event_formMouseClicked
	
	private void DescriptionMenuClicked(java.awt.event.ActionEvent evt) {
		displayDescription(currentContextObject);
		contextMenu.setVisible(false);
		currentContextObject=null;
	}
	
	public void displayDescription(Object p) {
		StyledDocument doc = null , dynamicDoc = null ;
		JTextPane descriptionArea = frame.getDescriptionPane() ;
		try{			
			if (p instanceof AbstractDescriptionNode){
				AbstractDescriptionNode ADN = (AbstractDescriptionNode)p;
				doc = ADN.getStyledDocument();
				dynamicDoc = ADN.getDynamicDescription() ;
				doc.append(dynamicDoc) ;
				try {
					descriptionArea.getDocument().remove( 0 , descriptionArea.getDocument().getLength() ) ;
					for ( int i = 0 ; i < doc.getLength() ; i++ ) {
						if ( doc.getStyledElement(i).getContent().equals("\t") )
							descriptionArea.getDocument().insertString(descriptionArea.getDocument().getLength() ,"\t", doc.getStyledElement(i).getAttributeSet()) ;
						else
							descriptionArea.getDocument().insertString(descriptionArea.getDocument().getLength() ,doc.getStyledElement(i).getContent() + "\n", doc.getStyledElement(i).getAttributeSet()) ;
					}
				}
				catch(NullPointerException e){}	
				catch(Exception e) {}
				
			}
		}		
		catch(NullPointerException e) {
		}		
	}
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
	
}
