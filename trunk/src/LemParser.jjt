options {
    STATIC = false;
    FORCE_LA_CHECK = true;
    VISITOR = true;
    MULTI = true;
    NODE_USES_PARSER=true;
	NODE_PREFIX = "LEM";
	NODE_PACKAGE = "org.jdns.xtuml.parser";
    VISITOR_EXCEPTION = "org.jdns.xtuml.metamodel.LemException";
//    DEBUG_PARSER           = true;
//    DEBUG_TOKEN_MANAGER    = true;
}

PARSER_BEGIN(LemParser)
package org.jdns.xtuml.parser;

import org.jdns.xtuml.metamodel.*;
import org.jdns.xtuml.verifier.*;
import java.io.*;


/**
 * LEM, a Language for Executable Models. 
 * <p>
 * This file is part of the author's Master by Coursework project. The project involves developing a
 * a text-based language to define xtUML models together with a language parser and validator. The
 * latter is a JAVA program which parses the LEM input file (according to the formal grammar) and builds
 * an in-memory graph representing the xtUML model defined by the LEM input file. This software is 
 * designed to form the basis of a suite of Open Source tools supporting xtUML.
 * <p>
 * Copyright (c) 2004, Steven Ring; steven@southsky.com.au.<br>All rights reserved pending release
 * under a suitable Open Source license.
 * <p>
 * <h2>Acknowledgements</h2>
 * <ol>
 * <li>Emma Margaret Walker, <i>A language for the specification of Shlaer-Mellor object-oriented
 * analysis models</i><br>ANU, BSEng Honours thesis, November 2002 </li>
 * <li>Leon Starr, <i>Metamodel for xtUML, 2002;</i> upon which much of the JAVA object model is based</li>
 * <li>Shayne Flint, instrumental in providing ongoing support and direction</li>
 * </ol>
 *
 *
 * <p>
 * Usage:<br>
 * <pre>
 * java Lem modelFile
 * </pre>
 *
 * @author  Steven Ring
 */
public class LemParser {

    private static final String id = "$Id$";
    private static final String revision = "$Revision$";
    private static final String release = "Release_1";

    LEMModelDeclaration rootNode = null;

    /**
     * Return the id string for the parser
     *
     * @return the id string for the parser
     */
    public static String getId() {
        return id;
    }

    /**
     * Return the revision string for the parser
     *
     * @return the revision string for the parser
     */
    public static String getRevision() {
        return revision;
    }

    /**
     * Return the release string for the parser
     *
     * @return the release string for the parser
     */
    public static String getRelease() {
        return release;
    }

    /**
     * Return a parsed model based on the LEM input stream supplied to the constructor
     *
     * @return the model as an instatiated graph of metamodel object instances
     * @throws Throwable in the event of an error. A ParseException is thrown
     * if parsing fails, a LemException is thrown if the model fails is semantic
     * checking fails. Any Throwable may be thrown in the event of a program bug (this
     * is a "work in progress" after all!)
     */
     public Model parse() throws ParseException, LemException {

        Model model = null;
        Visitor visitor = null;
        
        
        // parse the input file to generate a parse tree
        // (exceptions at this point are fatal)
            
        LEMModelDeclaration md = this.ModelDeclaration();

        // Allow the ModelBuilder to build an in-memory object graph
        // representing the structure of the xtUML model

        // pass 1

        visitor = new BuilderPass1();
        model = (Model)md.jjtAccept(visitor, null);

        // pass 2

        visitor = new BuilderPass2( model, visitor.getMapper() );
        md.jjtAccept(visitor, null);

        // pass 3

        visitor = new BuilderPass3( model, visitor.getMapper() );
        md.jjtAccept(visitor, null);

        // return the constructed model

	rootNode = md;
        return model;
    }

    public LEMModelDeclaration getRootNode() {
        return rootNode;
    }
}

PARSER_END(LemParser)


SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}

TOKEN : /* LITERALS */
{
 
  < DECIMAL_LITERAL: (["0"-"9"])+ >
|
  < REAL_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
  >
/* |
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
  > */
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
|
  < BOOLEAN_LITERAL:
	  "true"
	| "false"
  >
}

/* RESERVED WORDS AND LITERALS */

TOKEN :
{
  < ARBITRARY_ID: "arbitrary_id" >
| < BOOLEAN: "boolean" >
| < DATE: "date" >
| < INTEGER: "integer" >
| < REAL: "real" >
| < STRING: "string">
| < TIMESTAMP: "timestamp" >
| < UNIQUE_ID: "unique_id" >
| < ARRAY: "array">

}


TOKEN : /* IDENTIFIERS */
{
  <ASSOCIATION: "association">
| <GENERALISATION: "generalisation">
| <SPECIALISATION: "specialisation">
| <ATTRIBUTE: "attribute">
| <END: "end">
| <BETWEEN: "between">
| <BRIDGE: "bridge">
| <CLASS: "class">
| <IS: "is">
| <OR: "or">
| <AND: "and">
| <DOMAIN: "domain">
| <SCENARIO: "scenario">
| <SUBSYSTEM: "subsystem">
| <MODEL: "model">
| <TYPE: "type">
| <STATE: "state">
| <TRANSITION: "transition">
| <EVENT: "event">
| <BEHAVIOUR: "behaviour">
| <TO: "to">
| <FROM: "from">
| <BY: "by">
| <AT: "at">
| <ON: "on">
| <NULL: "null">
| <CARRIES: "carries">
| <CREATION: "creation">
| <DELETION: "deletion">
| <RANGE: "range">
| <PATTERN: "pattern" >
| <NUMERIC: "numeric" >
| <OBJREF: "objref" >
| <SET: "set" >
| <UNITS: "units" >
| <LENGTH: "length" >
| <PRECISION: "precision" >
| <REFERS: "refers" >
| <ACTIVE: "active" > /* x */
| <PASSIVE: "passive" > /* x */
| <CALCULATION: "calculation" >
| <DERIVED: "derived" >
| <REFERENTIAL: "referential" >
| <IDENTIFIER: "identifier" >
| <SEMI: ";">
| <LBRACKET: "[">
| <RBRACKET: "]">
| <LPAREN: "(">
| <RPAREN: ")">
| <COMMA: ",">
| <COLON: ":">
| <DOT: ".">
}

TOKEN : /* ACTION LANGUAGE IDENTIFIERS */
{
  <MOD: "mod">
| <LNOT: "!">
| <LAND: "&&">
| <LOR: "||">
| <SELF: "self">
| <GENERATE: "generate">
| <DELAY: "delay">
| <CANCEL: "cancel">
| <RELATE: "relate">
| <UNRELATE: "unrelate">
| <CREATING: "creating">
| <ACROSS: "across">
| <RECLASSIFY: "reclassify">
| <OF: "of">
| <CREATE: "create">
| <PRINT: "print">
| <ATOMIC: "atomic">
| <DELETE: "delete">
| <WITH: "with">
| <WHILE: "while">
| <FOR: "for">
| <EACH: "each">
| <IN: "in">
| <BREAK: "break">
| <SELECT: "select">
| <ONE: "one">
| <MANY: "many">
| <ALL : "all">
| <ANY: "any">
| <WHERE: "where">
| <INSTANCES : "instances">
| <RELATED : "related">
| <RETURN : "return">
| <IF: "if">
| <ELSE: "else">
| <ELSEIF: "elseif">
| <IS_ASSIGNED:	":="	>
| <EQUAL:	"="	>
| <NE:		"/="	>
| <LT:		"<"	>
| <LE:		"<="	>
| <GT:		">"	>
| <GE:		">="	>
| <PLUS:	"+"	>
| <MINUS:	"-"	>
| <MULTIPLY:	"*"	>
| <DIVIDE:	"/"	>
| <EXPON:	"^"	>
| <LBRACE : "{">
| <RBRACE : "}">
| <VAR: "var">

}

/* Simple identifier is a catch-all, goes last */
TOKEN: /* SIMPLE IDENTIFIER */
{
  < SIMPLE_IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
| < #LETTER: ["_","a"-"z","A"-"Z"] >
| < #UPPER_LETTER: ["A" - "Z"] >
| < #LOWER_LETTER: ["a" - "z"] >
| < #DIGIT: ["0"-"9"] >
}

/* <h1>LEM language specification $Revision$ ($Name$)</h1>

 
 */
LEMModelDeclaration ModelDeclaration() : { 
// constraint: LEM_E_01001=The <identifier> at the end of a model, subsystem, domain or class block must match the <identifier> at the beginning of the block.
}
{
  <MODEL> Identifier() <IS> Description() ModelBody() EndIdentifier() <SEMI> 
  { return jjtThis; }
}

void Identifier() : {}
{
	<SIMPLE_IDENTIFIER>
}

void EndIdentifier() : {}
{
	<END> [ Identifier() ]
}

/* Documentation for Model Body */
void ModelBody() : {}
{
  ( DomainDeclaration() )+ ( BridgeDeclaration() )*
}


/*
*@todo Fix description() so that it can differentiate it from the model description
*/
void BridgeDeclaration() : {
// constraint: LEM_E_01001
}
{
  <BRIDGE> Identifier() <IS> /*Description()*/ BridgeBody() EndIdentifier() <SEMI>
}


void BridgeBody() : {
// constraint: LEM_E_01002=<DomainIdentifier>s in <BridgeBody> must be distinct. You cannot bridge a domain to itself.
// constraint: LEM_E_01003=Each domain in a in a <BridgeBody> must be previously defined.
}
{
  <BETWEEN> Identifier() <AND> Identifier() Description()
}


void IdentifierDeclaration() : {}
{
        <IDENTIFIER> Description() <IS> 
             IdentifyingAttribute() [("," IdentifyingAttribute())* <AND> IdentifyingAttribute()]  
        <SEMI>
}

void IdentifyingAttribute() : {} {
  <SIMPLE_IDENTIFIER> 
}

void AttributeDeclaration() : {}
{
       
       ( BaseAttribute() | ReferentialAttribute() | DerivedAttribute() )
}

void BaseAttribute() : {}
{
	<ATTRIBUTE> AttributeIdentifier() 
	Description()
         <IS> Type() 
	[ <IS_ASSIGNED> Literal() ]
	<SEMI>
}

void ReferentialAttribute() : {}
{
        <REFERENTIAL> <ATTRIBUTE> AttributeIdentifier() 
	Description()
         <REFERS> <TO> AttributeReference()
	<SEMI>
}


void DerivedAttribute() : {}
{
        <DERIVED> <ATTRIBUTE> AttributeIdentifier() 
	Description()
         <IS> Type()
         <CALCULATION> <IS> 
            AttributeCalculationProcedure()
         <END> <CALCULATION>
	<SEMI>
}

void AttributeCalculationProcedure() : {}
{ 	Expression() }

void ReferredClass() : {} {
  <SIMPLE_IDENTIFIER> 
}

void ReferredAttribute() : {} {
  <SIMPLE_IDENTIFIER> 
}

void ReferredAssociation() : {} {
  <SIMPLE_IDENTIFIER> 
}

void AttributeReference() : {}
{
    [ <ACTIVE> | <PASSIVE> ] ReferredClass() <DOT> ReferredAttribute() <ACROSS> ReferredAssociation()
}

void Literal() : {} 
{  	
/*
 * TODO: EnumerationMember() here would cause ambiguous grammar.
 * Must resolve in a builder pass when we have more context.
 */

		<DECIMAL_LITERAL> 
	| 	<REAL_LITERAL> 
	| 	<STRING_LITERAL> 
	|	<BOOLEAN_LITERAL>
//	|	<FLOATING_POINT_LITERAL>
	|	<NULL>
}

void AttributeIdentifier() : {}
{ <SIMPLE_IDENTIFIER> }

void Type() : {}
{
	  PrimitiveType()
	| DomainSpecificType()
}

void DomainSpecificType() : {}
{ <SIMPLE_IDENTIFIER> }

void DomainDeclaration() : {
// constraint: LEM_E_01004=Each domain must have a unique <DomainIdentifier>.
}
{
  <DOMAIN> Identifier() <IS> 
  	Description() 
  	( TypeDeclaration() )* 
  	( SubSystemDeclaration() )+
        ( ScenarioDeclaration() )*
  EndIdentifier() <SEMI>
}

void TypeDeclaration() : {
// constraint: LEM_E_01005=Each <TypeIdentifer> must be unique within the domain.
}
{ 
	<TYPE> TypeIdentifier()
	Description()
	<IS> TypeSpecification()
	<SEMI>
}

void PrimitiveType() : {}
{ "arbitrary_id" | "numeric" | "string" | "boolean" | "date" | "objref" | "set" }

void TypeSpecification() : {}
{
	(   ArbitraryIdTypeSpecification() 
	  | EnumeratedList() 
	  | BooleanTypeSpecification() 
	  | NumericTypeSpecification() 
	  | StringTypeSpecification() 
          | DateTypeSpecification()
	  | ObjectReferenceTypeSpecification()
	  | SetTypeSpecification()
	)
}

void StringTypeSpecification() : {}
{
	<STRING> [ LengthSpec() ] [ PatternSpec() ]
}

void DateTypeSpecification() : {}
{
	<DATE> 
}

void BooleanTypeSpecification() : {}
{
	<BOOLEAN>
}

void ArbitraryIdTypeSpecification() : {}
{
	<ARBITRARY_ID>
}

void LengthSpec() : {}
{
	<LENGTH> <COLON> <DECIMAL_LITERAL>
}

void PatternSpec() : {}
{
	<PATTERN> <COLON> <STRING_LITERAL>
}

void ObjectReferenceTypeSpecification() : {}
{
	<OBJREF>
}

void SetTypeSpecification() : {}
{
	<SET>
}


void NumericTypeSpecification() : {}
{
	<NUMERIC> ( UnitsSpec() )? ( RangeSpec() )? ( PrecisionSpec() )?
}

void UnitsSpec() : {}
{
	<UNITS> <COLON> <STRING_LITERAL>
}

void RangeSpec() : {

// LowRangeValue and HighRangeValue are implemented as Expressions
// constraint: LowRangeValue and/or HighRangeValue is required
// constraint: LowRangeValue must be less that HighRangeValue where both are specified

}
{
	<RANGE> <COLON> 
			<LBRACKET>
				(  (Expression() <COMMA> [Expression()])
				 | (<COMMA> Expression())
				)
			<RBRACKET>
}

void PrecisionSpec() : {}
{
	<PRECISION> <COLON> PrecisionValue()
}

void PrecisionValue() : {}
{
	<REAL_LITERAL> | <DECIMAL_LITERAL>
}

void EnumeratedList() : {}
{	"(" EnumerationMember() ("," EnumerationMember())* <OR> EnumerationMember()  ")"
}

void EnumerationMember() : {
}
{	<SIMPLE_IDENTIFIER> } 


void TypeIdentifier() : {}
{ <SIMPLE_IDENTIFIER> }

/*
    @TODO - subsystems are currently specified as mandatory. They should define an <b>optional</b>
            grouping of domain elements. One approach is to have a Domain automatically declare a
            <b>Default</b> subsystem to act if the modeller omits a specific subsystem.
            
*/

void SubSystemDeclaration() : {
// constraint: LEM_E_01004=Each subsystem must have a unique <SubSystemIdentifier>
// constraint: LEM_E_01001
}
{ 
	<SUBSYSTEM> Identifier() <IS>
		Description() 
		SubSystemBody() 
	EndIdentifier() <SEMI>
}

void ScenarioDeclaration() : {
}
{
        <SCENARIO>
        Identifier() 
        <IS>
        Description()
        ActionBlock()
}

void Description() : {}
{ [<STRING_LITERAL>] }

/*
    @TODO - check elsewhere that we have at least one class specified
*/

void SubSystemBody() : {}
{ ( ClassDeclaration() | Relationship() )* }

void ClassDeclaration() : {}
{ 
	<CLASS> Identifier() 
                [<SPECIALISATION> <OF> SpecialisationList() ]
                <IS>
		Description()
		ClassBody() 
	EndIdentifier() <SEMI>
}

void SpecialisationList() : {}
{
    SuperClassIdentifier() ( "," SuperClassIdentifier() )* ( <AND> SuperClassIdentifier() )? 
}

/*
<h2>RELATIONSHIPS</h2>
<hr>
*/

void Relationship() : {}
{
    ( Association() | Generalisation() )
}

/*

Example :

    Association R1 is "relationship between a Publisher and a Book"
        Publisher "produces and markets" 0..* Book;
        Book "is produced and marketed by" 1..1 Publisher;
    End R1;

@TODO - Improvements in readability could be achieved without loss of syntactic precision:

    Association R1 "represents publishing arrangements in respect of books."
        A Publisher "produces and markets" many Book;
        A Book "is produced and marketed by" one Publisher;
    End R1;

@TODO - It would be nice if we could cast the object noun to its plural form...
        
        A Publisher "produces and markets" many Books;
    
*/
void Association() :
{
// constraint: LEM_E_01016=Each relationship must have a unique ID within the domain
// constraint: LEM_E_01021=In an association, the active subject of each perspective must be the same class.
// constraint: LEM_E_01022=In an association, the active object of each perspective must be the same class.
}
{
	<ASSOCIATION> Identifier() <IS> 
		Description() 
        ActivePerspective() ";"
        PassivePerspective() ";"
        [ AssociationClassDeclaration() ]
	EndIdentifier() ";"
}

void ActivePerspective() : {
// constraint: LEM_E_01017=In an association, the subject of an active perspective must be a class defined in the domain.
// constraint: LEM_E_01018=In an association, the object of an active perspective must be a class defined in the domain.
}
{ ActiveSubject() ActiveVerbClause() Multiplicity() ActiveObject() }

void PassivePerspective() : {
// constraint: LEM_E_01019=In an association, the subject of an passive perspective must be a class defined in the domain.
// constraint: LEM_E_01020=In an association, the object of an passive perspective must be a class defined in the domain.
}
{ ActiveObject() PassiveVerbClause() Multiplicity() ActiveSubject() }

void ActiveSubject() : {}
{ <SIMPLE_IDENTIFIER> }

void ActiveObject() : {}
{ <SIMPLE_IDENTIFIER> }

void ActiveVerbClause() : {}
{ VerbClause() }

void PassiveVerbClause() : {}
{ VerbClause() }

void VerbClause() : {}
{ <STRING_LITERAL> }

void ClassBody() : {}
{
	( AttributeDeclaration() )*
        ( IdentifierDeclaration() )*
	( EventDeclaration() )*
	[ Behaviour() ]
}


void Behaviour() : {}
{
	<BEHAVIOUR> <IS>
		Description()
		( SelfEventDeclaration() )*
		( StateDeclaration() )*
		( TransitionDeclaration() )*
	<END> <BEHAVIOUR> <SEMI>
}

void SelfEventDeclaration() : {}
{
    EventDeclaration()
}

/*
	Note that it allows for the declaration of SelfEvents  which are
	private to the Behaviour block (i.e. not part of the class' public Events

*/


void Generalisation() : {
//constraint: LEM_E_01016=Each relationship must have a unique ID within the domain
}
{
	<GENERALISATION> Identifier() <IS>
		Description() 
        GeneralisationBody() 
	EndIdentifier() ";"
}

/*
    @TODO - the term "is a" is preferable to "is" ...
*/
void GeneralisationBody() : {}
{
	SuperClassIdentifier() "is" 
		SubClassIdentifier() [ ( "," SubClassIdentifier() )* "or"
		SubClassIdentifier() ] ";"
}

void SuperClassIdentifier() : {
// constraint:LEM_E_01014=The superclass in a generalisation relationship must be an existing class defined in the current domain
}
{ <SIMPLE_IDENTIFIER> }

void SubClassIdentifier() : {
// constraint:LEM_E_01015=All subclasses in a generalisation relationship must be existing classes defined in the current domain
}
{ <SIMPLE_IDENTIFIER> }

void AssociationClassDeclaration() : {}
{ ClassDeclaration() }

/*

@TODO - think about using natural language phrases to represent multiplicities:

    "1..1"  -> one
    "0..1"  -> zero or one
    "0..*"  -> many
    "1..*"  -> at least one

*/
void Multiplicity() : {}
{ ( "1..1" | "0..1" | "0..*" | "1..*" ) }



/***********************************************************************************
 * Event declarations
 ***********************************************************************************/

void EventDeclaration() : {}
{
	[ <SELF> ] <EVENT> Identifier() 
		Description() 
		[ <CARRIES> EventSignature()] <SEMI>
}

/*

   We may need:

void SelfEventDeclaration() : {}
{
	EventDeclaration()
}

*/


void StateSignature() : {}
{ [ Signature() ] }

void EventSignature() : {}
{ Signature() }

void Signature() : {}
{ <LPAREN> ParameterDeclaration() ( <COMMA> ParameterDeclaration() )* <RPAREN> }

void ParameterDeclaration() : {
// constraint: LEM_E_01023=In a parameter declaration, the domain specific data type must be defined in the domain
// constraint: LEM_E_01008=Duplicate parameter identifier. Each parameter must be unique within a signature.
}
{
	Identifier() Description() <IS> Type()
}

/****************************************************************************************
 * State declarations
 ****************************************************************************************/

void StateDeclaration() : {}
{
	/* TODO: move the <IS> to perhaps after the identifier */
    [<DELETION>] <STATE> Identifier()
		Description() 
		StateSignature() <IS>
		Procedure()
    EndIdentifier() <SEMI>
}

/*****************************************************************************************
 * State transition definitions
 *****************************************************************************************/

void TransitionDeclaration() : {}
// constraint: LEM_E_01010=Transition 'from' State must be defined in enclosing behaviour block.
// constraint: LEM_E_01012=Transition 'from' State must be a non deletion state.
// constraint: LEM_E_01011=Transition 'to' State must be defined in enclosing behaviour block.
{ 	
	<ON> Identifier()
		Description()
		<TRANSITION> 
		<FROM> [ <CREATION> <STATE> | Identifier() ]
		<TO> Identifier() <SEMI>
}

/*****************************************************************************************
 * Action Language defined here
 *****************************************************************************************/

void Procedure() : {}
{
	[ ActionBlock() ]
}

void ActionBlock() : {}
{
	<LBRACE>
	VariableDeclarationList()
	ActionList()
	<RBRACE>
}

void VariableDeclarationList() : {}
{
	(LOOKAHEAD(VariableDeclaration()) VariableDeclaration())*
}

void VariableDeclaration() : {}
{
	Type()
	Identifier()
	<SEMI>
}


void ActionList() : {}
{
	(
		Action()
	)*
}

void Action() : {}
{
	ObjectCreation()<SEMI>
	| ObjectDeletion()<SEMI>
	| AttributeAssignment()<SEMI>
	| EventGeneration()<SEMI>
	| EventCancel()<SEMI>
	| LinkCreation()<SEMI>
    | LinkDeletion()<SEMI>
	| PrintAction()<SEMI>
	| CreationTransaction()
	| IfStatement()
	| WhileStatement()
	| ActionBlock()
	| ForStatement()
	| Break()
        | Return()
}

void ObjectReference() : {}
{
	  <SELF>
	| <SIMPLE_IDENTIFIER>
}

/**
 * VariableReference covers local variables within a context,
 * attributes of an object.
 */
void VariableReference() : {}
{
	LOOKAHEAD(2)
	  ObjectReference() <DOT> Identifier()
	| <SELF>
	| Identifier()
}

void CreationTransaction() : {}
{
	<ATOMIC>
	<CREATION>
	ActionBlock()
}

void ObjectCreation() : {}  
{
	<CREATE>
	ClassList()
}	

// ClassList must match at least one class.. is this what we want?
void ClassList() : {}
{
        Identifier() ( <COMMA> Identifier() )*
}

void ObjectDeletion() : {}
{
	<DELETE> ObjectReference()
}

void RelationshipReference() : {}
{
	LOOKAHEAD(2)
	  (Identifier() <DOT> VerbClause())
	| Identifier()
}

void PrintAction() : {} 
{
	<PRINT> Expression()
}

void LinkCreation() : {} 
{
	<RELATE> 
	ObjectReference() 
	<TO> 
	ObjectReference() 
	<ACROSS> 
	RelationshipReference()
	LinkObjectCreation()
}

void LinkObjectCreation() : {}
{
	[<CREATING> Identifier()]
}

void LinkDeletion() : {}
{
	<UNRELATE> ObjectReference() <FROM> ObjectReference() <ACROSS> RelationshipReference() /* Identifier()*/
}

// can we reclassify from a multi class to another multi class?
void ObjectReclassification() : {}
{
	<RECLASSIFY> ObjectReference() <FROM> Identifier() <TO> Identifier()
}

/** Events */
void EventGeneration() : {}
{
        <GENERATE>
	Identifier()
	OptionalParameterList()
	<TO>
	ObjectReference()
	WithDelay()
}

void ParameterList() : {}
{
	<LPAREN>
	[	
		Expression()
		(
			<COMMA>
			Expression()
		)*
	]
	<RPAREN>
}

void OptionalParameterList() : {}
{
	[ ParameterList() ]
}

void WithDelay() : {}
{
	[
		<WITH>
		<DELAY>
		Expression()
	]
}

/**
 * May only cancel delayed signals to self.
 */
void EventCancel() : {}
{
	<CANCEL>
	Identifier()
	<TO>
	<SELF>
}

/**
 * Statements that can be assigned some value
 */
void LValue() : {}
{
	VariableReference()
}

void AttributeAssignment() : {}
{
	LValue() <IS_ASSIGNED> Expression()
}

/**
 * Flow control statements.
 */
void IfStatement() : {}
{
	<IF>
	<LPAREN>
	Expression()
	<RPAREN>
	ActionBlock()

	( ElseIfPart() )*
	[ ElsePart() ]
}

void ElseIfPart() : {}
{
	<ELSEIF>
	<LPAREN>
	Expression()
	<RPAREN>
	ActionBlock()
}

void ElsePart() : {}
{
	<ELSE>
	ActionBlock()
}

void WhileStatement() : {}
{
	<WHILE>
	<LPAREN>
	Expression()
	<RPAREN>
	ActionBlock()
}

void SelectStatement() : {}
{
    <SELECT>
    SelectMultiplicity() 
    <FROM> <INSTANCES> <OF>
    Identifier() 
    WhereClause()
}

void SelectMultiplicity() : {}
{
    (<ONE>|<ALL>|<ANY>)
}

void WhereClause() : {}
{
    [ <WHERE> Expression() ]
}

/* void Related() : {}
{
    ObjectReference()<RELATED><TO>ClassVariable()<ACROSS>RelationshipVariable()
} */

void RelationshipVariable() : {}
{
    <SIMPLE_IDENTIFIER>
}

void ForStatement() : {}
{
	<FOR> <EACH>
	Identifier()
	<IN>
	Expression()
	ActionBlock()	
}

void Break() : {}
{
	<BREAK><SEMI>
}

void Return() : {}
{
        <RETURN> 
        [ Expression() ] 
        <SEMI>
}

/**
 * Expressions. These are statements returning a value.
 */
void Expression() : {}
{ 
	AndRelation()
	(
		LogicalOr()
		AndRelation()
	)*
}

/* This is kept only to keep BuilderPass2.listToTree() happy */
void LogicalOr() : {}
{
	<LOR>
}

void LogicalAnd() : {}
{
	<LAND>
}

void AndRelation() : {}
{
	Relation()
	(
		LogicalAnd()
		Relation()
	)*
}

void Relation() : {}
{
	RelatedTo() | (SimpleExpression()
	(
		Relational()
		SimpleExpression()
	)*)
}

void Relational() : {}
{
	<EQUAL>
	| <NE>
	| <LT>
	| <LE>
	| <GT>
	| <GE>    
}

void RelatedTo() : {}
{        
    <RELATED><TO> 
    Identifier() 
    <ACROSS> 
    Identifier() 
}

void SimpleExpression() : {}
{
	Term()
	(
		Adding()
		Term()
	)*
}

void Adding() : {}
{
	<PLUS>
	| <MINUS>
}

void Term() : {}
{
	Factor()
	(
		Multiplying()
		Factor()
	)*
}

void Multiplying() : {}
{
	<MULTIPLY>
	| <DIVIDE>
	| <MOD>
}

void Factor() : {}
{
	Unary()
	[
		<EXPON>
		Unary()
	]
}

void UnaryOperator() : {}
{
	(<PLUS> 
	| <MINUS>
	| <LNOT>)
}

void Unary() : {}
{
	[ UnaryOperator() ]
	Primary() 
	[ FunctionCall() ]
}

void Primary() : {}
{
	Literal()
	| VariableReference()
	| ParenthesizedPrimary()
	| ObjectCreation()
	| SelectStatement()
}

void ParenthesizedPrimary() : {}
{
	<LPAREN>
	Expression()
	<RPAREN>
}

void FunctionCall() : {}
{
	ParameterList()
}
