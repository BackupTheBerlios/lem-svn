/*
* $Revision$
* $Log$
* Revision 1.59  2005/07/16 15:55:23  u3957053
* Eliminated RelationshipIdentifier and RelationshipEndIdentifier.
*
* Add LinkCreation() to action list.
*
* Revision 1.58  2005/07/12 06:49:41  u3957053
* Move LOR and LAND tokens into their own non-terminal to satisfy BuilderPass2.listToTree
*
* Revision 1.57  2005/07/12 04:32:19  u2567446
* Modified the Logical AND and OR to reflect AND having higher precedence than OR.
*
* Revision 1.56  2005/07/10 14:25:40  u3958283
* Completed Select Statement.
*
* Revision 1.55  2005/07/10 02:03:07  u3957053
* Remove Type() production from VariableDeclaration, replace with new token
* "VAR"
*
* Revision 1.54  2005/07/08 05:31:40  u3957053
* Removed redundant FLOATING_POINT_LITERAL.
*
* Made DECIMAL_LITERAL match the number 0!!
*
* Revision 1.53  2005/07/08 03:22:38  u3958283
* Added Select statement to the LemParsers, Where clause is not completed yet, needs discussing with the group.
*
* Revision 1.52  2005/07/06 10:00:30  u2567446
* Modified the grammar for Relation and Expression to reflect left associativity.
*
* Revision 1.51  2005/07/05 04:54:52  u2567446
* Modified the multiplication for left-associativity.
*
* Revision 1.50  2005/07/04 23:18:44  u3957053
* Fixed syntax error
*
* Revision 1.49  2005/07/04 18:41:51  u2567446
* Changed the definition of SimpleExpression to reflect the left associativity of the expression. Tree is flatened so that addition and subtraction can be done as we go through the tree from left to right.
*
* Revision 1.48  2005/07/04 15:34:47  u2567446
* Added link actions and reclassify action.
*
* Revision 1.47  2005/07/03 14:41:21  u3958283
* Added ForLoop statement, also added a break token to the statement list to be used, inside for loop, while loops and possibly If statements.
*
* Revision 1.46  2005/06/30 07:52:04  u3957053
* Parser now expands expressions such as 2 + 3 + 4 into a tree as opposed to a list
*
* Revision 1.45  2005/06/30 07:32:54  u3957053
* Add getter for root node, split unary operators into their own non-terminal
*
* Revision 1.44  2005/06/29 14:15:28  u3293115
* Added basic signal cancel action + test case.
*
* Revision 1.43  2005/06/29 14:06:33  u3293115
* Parameters to event generation statements should be expressions
* rather than identifiers
*
* Revision 1.42  2005/06/29 14:02:05  u3293115
* Allow expressions in signal generation delay specification rather
* than constant literals. Add a testcase for it.
*
* Revision 1.41  2005/06/29 13:59:28  u3293115
* Finally changed 'object' keyword to 'class' for class declarations.
* It would have gotten too confusing when we introduce objects.
*
* Revision 1.40  2005/06/29 13:42:51  u3293115
* Use Identifier instead of ParameterIdentifier, enable parameter lists of
* events to work correctly.
*
* Add action language in sample to exercise this and other action language
* features.
*
* Revision 1.39  2005/06/29 13:23:40  u3293115
* Prune away a lot of unused terminal strings.
* Fixed up a slight breakage introduced by the change fixing the Unary
* operators.
*
* Revision 1.38  2005/06/28 06:45:59  u2567446
* Modified the unary non terminal to reflect precedences.
*
* Revision 1.37  2005/06/01 14:06:52  u3957053
* Added a new ClassList() non-terminal and BuilderPass2 code to implement it. The creation action can now take a list of classes
*
* Revision 1.36  2005/06/01 10:02:58  u3293115
* Added variable declarations. Variable declarations follow C style:
* can only be declared at the beginning of each block. Needs some
* careful LOOKAHEAD.
*
* Revision 1.35  2005/06/01 09:58:56  u3964614
* LemParser.jjt:
* Commented out the 'description()' part of the bridge grammar. This is because
* an issue needs to be resolved with there being two 'descriptions' (model and
* bridge)
*
* Bridge.java:
* made this implement DescribedEntity so that it could be visited properly
*
* BuilderPass1.java:
* Added visit(LEMBridgeDeclaration) so that bridges can start being worked
* into the models.
*
* Bridges are now a part of the object model. They still need to be worked into
* the GUI, and the issue with the two descriptions needs to be solved.
*
* Revision 1.34  2005/06/01 08:02:19  u3964614
* Simplified grammar. Now there is no 'BridgeIdentifier' just Identifier etc.
* Much the same as the changes that were made to model declaration
*
* Revision 1.33  2005/05/31 12:34:40  u3293115
* Cleaned up 'types' a bit, added some missing bits for "objref" type.
*
* Revision 1.32  2005/05/31 12:29:34  u3293115
* Rename AttributeInstanceReference to VariableReference
*
* Revision 1.31  2005/05/31 02:23:02  u3958283
* :completed the Signal Generation section with delay and parameters.
*
* Revision 1.30  2005/05/30 07:06:42  u3293115
* Added 'objref' core type to grammar and metamodel.
*
* Grammar type declarations and domain specific types, etc. really need
* to be tightened up. It currently doesn't appear to be able to support a
* runtime.
*
* Revision 1.29  2005/05/27 00:12:47  u3957053
* Get rid of EventIdentifiers, they're now just Identifiers
*
* Removed corresponding visit() method in BuilderPass1
*
* Revision 1.28  2005/05/27 00:04:25  u3957053
* StateIdentifier -> Identifier, StateEndIdentifier -> EndIdentifier.
*
* Implement matching of state end identifiers.
*
* Revision 1.27  2005/05/26 07:19:51  u3958283
* add GenerateSignal
*
* Revision 1.26  2005/05/25 05:42:54  u3293115
* Cleaned up a bit of action language related prototyping that got into
* the builder passes.
*
* Re-did the adding of action language procedures to their state machines.
* We have no metamodel for anything lower than the procedure at the moment,
* but it would be possible to get an interpreter running on the raw parse
* tree.
*
* Revision 1.25  2005/05/25 04:32:32  u3293115
* Fix action language blocks, actually include some basic action language
* in bookstore 2.
*
* Disambiguate the last ambiguous non terminal match with an explicit
* LOOKAHEAD directive. Remove the global LOOKAHEAD=4 directive.
*
* Revision 1.24  2005/05/25 03:51:09  u3293115
* Eliminate passing of the model down into the top level visitors.
*
* Revision 1.23  2005/05/25 03:33:37  u3293115
* Have BuilderPass1 create the Model metamodel object rather than the
* parser do it.
*
* Revision 1.22  2005/05/25 03:25:08  u3957053
* Remove SubsystemIdentifier and EndSubsystemIdentifier, remove ClassIdentifier
* and ClassEndIdentifier. Implement checking for correct start and end subsystem
* identifiers.
*
* Revision 1.21  2005/05/25 03:16:28  u3293115
* Removed high and low range non terminals.
*
* Revision 1.20  2005/05/25 02:53:10  u3293115
* Fairly large change to action language grammar. Probably won't be
* a final version but something to work from when we get down to
* specifying the final EBNF for the action language soon.
*
* Revision 1.19  2005/05/25 02:40:07  u3293115
* Cleaned up token definitions.
*
* Revision 1.18  2005/05/25 02:33:46  u3293115
* Removed the BooleanLiteral non-terminal.
*
* Revision 1.17  2005/05/25 02:32:45  u3957053
* Rolled DomainIdentifier and DomainEndIdentifier into Identifier.
*
* Implement domain end identifier checking
*
*/

options {
    STATIC = false;
    FORCE_LA_CHECK = true;
    VISITOR = true;
    MULTI = true;
    NODE_USES_PARSER=true;
	NODE_PREFIX = "LEM";
	NODE_PACKAGE = "parser";
    VISITOR_EXCEPTION = "metamodel.LemException";
//    DEBUG_PARSER           = true;
//    DEBUG_TOKEN_MANAGER    = true;

}

PARSER_BEGIN(LemParser)
package parser;

import metamodel.*;
import verifier.*;
import util.*;
import java.io.*;


/**
 * LEM, a Language for Executable Models. 
 * <p>
 * This file is part of the author's Master by Coursework project. The project involves developing a
 * a text-based language to define xtUML models together with a language parser and validator. The
 * latter is a JAVA program which parses the LEM input file (according to the formal grammar) and builds
 * an in-memory graph representing the xtUML model defined by the LEM input file. This software is 
 * designed to form the basis of a suite of Open Source tools supporting xtUML.
 * <p>
 * Copyright (c) 2004, Steven Ring; steven@southsky.com.au.<br>All rights reserved pending release
 * under a suitable Open Source license.
 * <p>
 * <h2>Acknowledgements</h2>
 * <ol>
 * <li>Emma Margaret Walker, <i>A language for the specification of Shlaer-Mellor object-oriented
 * analysis models</i><br>ANU, BSEng Honours thesis, November 2002 </li>
 * <li>Leon Starr, <i>Metamodel for xtUML, 2002;</i> upon which much of the JAVA object model is based</li>
 * <li>Shayne Flint, instrumental in providing ongoing support and direction</li>
 * </ol>
 *
 *
 * <p>
 * Usage:<br>
 * <pre>
 * java Lem modelFile
 * </pre>
 *
 * @author  Steven Ring
 */
public class LemParser {

    private static final String id = "$Id$";
    private static final String revision = "$Revision$";
    private static final String release = "Release_1";

    LEMModelDeclaration rootNode = null;

    /**
     * Return the id string for the parser
     *
     * @return the id string for the parser
     */
    public static String getId() {
        return id;
    }

    /**
     * Return the revision string for the parser
     *
     * @return the revision string for the parser
     */
    public static String getRevision() {
        return revision;
    }

    /**
     * Return the release string for the parser
     *
     * @return the release string for the parser
     */
    public static String getRelease() {
        return release;
    }

    /**
     * Return a parsed model based on the LEM input stream supplied to the constructor
     *
     * @return the model as an instatiated graph of metamodel object instances
     * @throws Throwable in the event of an error. A ParseException is thrown
     * if parsing fails, a LemException is thrown if the model fails is semantic
     * checking fails. Any Throwable may be thrown in the event of a program bug (this
     * is a "work in progress" after all!)
     */
     public Model parse() throws ParseException, LemException {

        Model model = null;
        Visitor visitor = null;
        
        
        // parse the input file to generate a parse tree
        // (exceptions at this point are fatal)
            
        LEMModelDeclaration md = this.ModelDeclaration();

        // Allow the ModelBuilder to build an in-memory object graph
        // representing the structure of the xtUML model

        // pass 1

        visitor = new BuilderPass1();
        model = (Model)md.jjtAccept(visitor, null);

        // pass 2

        visitor = new BuilderPass2( model, visitor.getMapper() );
        md.jjtAccept(visitor, null);

        // pass 3

        visitor = new BuilderPass3( model, visitor.getMapper() );
        md.jjtAccept(visitor, null);

        // return the constructed model

	rootNode = md;
        return model;
    }

    public LEMModelDeclaration getRootNode() {
        return rootNode;
    }
}

PARSER_END(LemParser)


SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}

TOKEN : /* LITERALS */
{
 
  < DECIMAL_LITERAL: (["0"-"9"])+ >
|
  < REAL_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
  >
/* |
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
  > */
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
|
  < BOOLEAN_LITERAL:
	  "true"
	| "false"
  >
}

/* RESERVED WORDS AND LITERALS */

TOKEN :
{
  < ARBITRARY_ID: "arbitrary_id" >
| < BOOLEAN: "boolean" >
| < DATE: "date" >
| < INTEGER: "integer" >
| < REAL: "real" >
| < STRING: "string">
| < TIMESTAMP: "timestamp" >
| < UNIQUE_ID: "unique_id" >
| < ARRAY: "array">

}


TOKEN : /* IDENTIFIERS */
{
  <ASSOCIATION: "association">
| <GENERALISATION: "generalisation">
| <SPECIALISATION: "specialisation">
| <ATTRIBUTE: "attribute">
| <END: "end">
| <BETWEEN: "between">
| <BRIDGE: "bridge">
| <CLASS: "class">
| <IS: "is">
| <OR: "or">
| <AND: "and">
| <DOMAIN: "domain">
| <SUBSYSTEM: "subsystem">
| <MODEL: "model">
| <TYPE: "type">
| <STATE: "state">
| <TRANSITION: "transition">
| <EVENT: "event">
| <BEHAVIOUR: "behaviour">
| <TO: "to">
| <FROM: "from">
| <BY: "by">
| <AT: "at">
| <ON: "on">
| <NULL: "null">
| <CARRIES: "carries">
| <CREATION: "creation">
| <DELETION: "deletion">
| <RANGE: "range">
| <PATTERN: "pattern" >
| <NUMERIC: "numeric" >
| <OBJREF: "objref" >
| <UNITS: "units" >
| <LENGTH: "length" >
| <PRECISION: "precision" >
| <REFERS: "refers" >
| <ACTIVE: "active" > /* x */
| <PASSIVE: "passive" > /* x */
| <CALCULATION: "calculation" >
| <DERIVED: "derived" >
| <REFERENTIAL: "referential" >
| <IDENTIFIER: "identifier" >
| <SEMI: ";">
| <LBRACKET: "[">
| <RBRACKET: "]">
| <LPAREN: "(">
| <RPAREN: ")">
| <COMMA: ",">
| <COLON: ":">
| <DOT: ".">
}

TOKEN : /* ACTION LANGUAGE IDENTIFIERS */
{
  <MOD: "mod">
| <LNOT: "!">
| <LAND: "&&">
| <LOR: "||">
| <SELF: "self">
| <GENERATE: "generate">
| <DELAY: "delay">
| <CANCEL: "cancel">
| <RELATE: "relate">
| <UNRELATE: "unrelate">
| <CREATING: "creating">
| <ACROSS: "across">
| <RECLASSIFY: "reclassify">
| <OF: "of">
| <CREATE: "create">
| <DELETE: "delete">
| <WITH: "with">
| <WHILE: "while">
| <FOR: "for">
| <EACH: "each">
| <IN: "in">
| <BREAK: "break">
| <SELECT: "select">
| <ONE: "one">
| <MANY: "many">
| <ALL : "all">
| <ANY: "any">
| <WHERE: "where">
| <INSTANCES : "instances">
| <RELATED : "related">
| <SELECTED : "selected">
| <IF: "if">
| <ELSE: "else">
| <ELSEIF: "elseif">
| <IS_ASSIGNED:	":="	>
| <EQUAL:	"="	>
| <NE:		"/="	>
| <LT:		"<"	>
| <LE:		"<="	>
| <GT:		">"	>
| <GE:		">="	>
| <PLUS:	"+"	>
| <MINUS:	"-"	>
| <MULTIPLY:	"*"	>
| <DIVIDE:	"/"	>
| <EXPON:	"^"	>
| <LBRACE : "{">
| <RBRACE : "}">
| <VAR: "var">

}

/* Simple identifier is a catch-all, goes last */
TOKEN: /* SIMPLE IDENTIFIER */
{
  < SIMPLE_IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
| < #LETTER: ["_","a"-"z","A"-"Z"] >
| < #UPPER_LETTER: ["A" - "Z"] >
| < #LOWER_LETTER: ["a" - "z"] >
| < #DIGIT: ["0"-"9"] >
}

/* <h1>LEM language specification $Revision$ ($Name$)</h1>

 
 */
LEMModelDeclaration ModelDeclaration() : { 
// constraint: LEM_E_01001=The <identifier> at the end of a model, subsystem, domain or class block must match the <identifier> at the beginning of the block.
}
{
  <MODEL> Identifier() <IS> Description() ModelBody() EndIdentifier() <SEMI> 
  { return jjtThis; }
}

void Identifier() : {}
{
	<SIMPLE_IDENTIFIER>
}

void EndIdentifier() : {}
{
	<END> [ Identifier() ]
}

/* Documentation for Model Body */
void ModelBody() : {}
{
  ( DomainDeclaration() )+ ( BridgeDeclaration() )*
}


/*
*@todo Fix description() so that it can differentiate it from the model description
*/
void BridgeDeclaration() : {
// constraint: LEM_E_01001
}
{
  <BRIDGE> Identifier() <IS> /*Description()*/ BridgeBody() EndIdentifier() <SEMI>
}


void BridgeBody() : {
// constraint: LEM_E_01002=<DomainIdentifier>s in <BridgeBody> must be distinct. You cannot bridge a domain to itself.
// constraint: LEM_E_01003=Each domain in a in a <BridgeBody> must be previously defined.
}
{
  <BETWEEN> Identifier() <AND> Identifier() Description()
}


void IdentifierDeclaration() : {}
{
        <IDENTIFIER> Description() <IS> 
             IdentifyingAttribute() [("," IdentifyingAttribute())* <AND> IdentifyingAttribute()]  
        <SEMI>
}

void IdentifyingAttribute() : {} {
  <SIMPLE_IDENTIFIER> 
}

void AttributeDeclaration() : {}
{
       
       ( BaseAttribute() | ReferentialAttribute() | DerivedAttribute() )
}

void BaseAttribute() : {}
{
	<ATTRIBUTE> AttributeIdentifier() 
	Description()
         <IS> Type() 
	[ <IS_ASSIGNED> Literal() ]
	<SEMI>
}

void ReferentialAttribute() : {}
{
        <REFERENTIAL> <ATTRIBUTE> AttributeIdentifier() 
	Description()
         <REFERS> <TO> AttributeReference()
	<SEMI>
}


void DerivedAttribute() : {}
{
        <DERIVED> <ATTRIBUTE> AttributeIdentifier() 
	Description()
         <IS> Type()
         <CALCULATION> <IS> 
            AttributeCalculationProcedure()
         <END> <CALCULATION>
	<SEMI>
}

void AttributeCalculationProcedure() : {}
{ 	Expression() }

void ReferredClass() : {} {
  <SIMPLE_IDENTIFIER> 
}

void ReferredAttribute() : {} {
  <SIMPLE_IDENTIFIER> 
}

void ReferredAssociation() : {} {
  <SIMPLE_IDENTIFIER> 
}

void AttributeReference() : {}
{
    [ <ACTIVE> | <PASSIVE> ] ReferredClass() <DOT> ReferredAttribute() <ACROSS> ReferredAssociation()
}

void Literal() : {} 
{  	
/*
 * TODO: EnumerationMember() here would cause ambiguous grammar.
 * Must resolve in a builder pass when we have more context.
 */

		<DECIMAL_LITERAL> 
	| 	<REAL_LITERAL> 
	| 	<STRING_LITERAL> 
	|	<BOOLEAN_LITERAL>
//	|	<FLOATING_POINT_LITERAL>
	|	<NULL>
}

void AttributeIdentifier() : {}
{ <SIMPLE_IDENTIFIER> }

void Type() : {}
{
	  PrimitiveType()
	| DomainSpecificType()
}

void DomainSpecificType() : {}
{ <SIMPLE_IDENTIFIER> }

void DomainDeclaration() : {
// constraint: LEM_E_01004=Each domain must have a unique <DomainIdentifier>.
}
{
  <DOMAIN> Identifier() <IS> 
  	Description() 
  	( TypeDeclaration() )* 
  	( SubSystemDeclaration() )+ 
  EndIdentifier() <SEMI>
}

void TypeDeclaration() : {
// constraint: LEM_E_01005=Each <TypeIdentifer> must be unique within the domain.
}
{ 
	<TYPE> TypeIdentifier()
	Description()
	<IS> TypeSpecification()
	<SEMI>
}

void PrimitiveType() : {}
{ "arbitrary_id" | "numeric" | "string" | "boolean" | "date" | "objref" }

void TypeSpecification() : {}
{
	(   ArbitraryIdTypeSpecification() 
	  | EnumeratedList() 
	  | BooleanTypeSpecification() 
	  | NumericTypeSpecification() 
	  | StringTypeSpecification() 
          | DateTypeSpecification()
	  | ObjectReferenceTypeSpecification()
	)
}

void StringTypeSpecification() : {}
{
	<STRING> [ LengthSpec() ] [ PatternSpec() ]
}

void DateTypeSpecification() : {}
{
	<DATE> 
}

void BooleanTypeSpecification() : {}
{
	<BOOLEAN>
}

void ArbitraryIdTypeSpecification() : {}
{
	<ARBITRARY_ID>
}

void LengthSpec() : {}
{
	<LENGTH> <COLON> <DECIMAL_LITERAL>
}

void PatternSpec() : {}
{
	<PATTERN> <COLON> <STRING_LITERAL>
}

void ObjectReferenceTypeSpecification() : {}
{
	<OBJREF>
}

void NumericTypeSpecification() : {}
{
	<NUMERIC> ( UnitsSpec() )? ( RangeSpec() )? ( PrecisionSpec() )?
}

void UnitsSpec() : {}
{
	<UNITS> <COLON> <STRING_LITERAL>
}

void RangeSpec() : {

// LowRangeValue and HighRangeValue are implemented as Expressions
// constraint: LowRangeValue and/or HighRangeValue is required
// constraint: LowRangeValue must be less that HighRangeValue where both are specified

}
{
	<RANGE> <COLON> 
			<LBRACKET>
				(  (Expression() <COMMA> [Expression()])
				 | (<COMMA> Expression())
				)
			<RBRACKET>
}

void PrecisionSpec() : {}
{
	<PRECISION> <COLON> PrecisionValue()
}

void PrecisionValue() : {}
{
	<REAL_LITERAL> | <DECIMAL_LITERAL>
}

void EnumeratedList() : {}
{	"(" EnumerationMember() ("," EnumerationMember())* <OR> EnumerationMember()  ")"
}

void EnumerationMember() : {
}
{	<SIMPLE_IDENTIFIER> } 


void TypeIdentifier() : {}
{ <SIMPLE_IDENTIFIER> }

/*
    @TODO - subsystems are currently specified as mandatory. They should define an <b>optional</b>
            grouping of domain elements. One approach is to have a Domain automatically declare a
            <b>Default</b> subsystem to act if the modeller omits a specific subsystem.
            
*/

void SubSystemDeclaration() : {
// constraint: LEM_E_01004=Each subsystem must have a unique <SubSystemIdentifier>
// constraint: LEM_E_01001
}
{ 
	<SUBSYSTEM> Identifier() <IS>
		Description() 
		SubSystemBody() 
	EndIdentifier() <SEMI>
}

void Description() : {}
{ [<STRING_LITERAL>] }

/*
    @TODO - check elsewhere that we have at least one class specified
*/

void SubSystemBody() : {}
{ ( ClassDeclaration() | Relationship() )* }

void ClassDeclaration() : {}
{ 
	<CLASS> Identifier() 
                [<SPECIALISATION> <OF> SpecialisationList() ]
                <IS>
		Description()
		ClassBody() 
	EndIdentifier() <SEMI>
}

void SpecialisationList() : {}
{
    SuperClassIdentifier() ( "," SuperClassIdentifier() )* ( <AND> SuperClassIdentifier() )? 
}

/*
<h2>RELATIONSHIPS</h2>
<hr>
*/

void Relationship() : {}
{
    ( Association() | Generalisation() )
}

/*

Example :

    Association R1 is "relationship between a Publisher and a Book"
        Publisher "produces and markets" 0..* Book;
        Book "is produced and marketed by" 1..1 Publisher;
    End R1;

@TODO - Improvements in readability could be achieved without loss of syntactic precision:

    Association R1 "represents publishing arrangements in respect of books."
        A Publisher "produces and markets" many Book;
        A Book "is produced and marketed by" one Publisher;
    End R1;

@TODO - It would be nice if we could cast the object noun to its plural form...
        
        A Publisher "produces and markets" many Books;
    
*/
void Association() :
{
// constraint: LEM_E_01016=Each relationship must have a unique ID within the domain
// constraint: LEM_E_01021=In an association, the active subject of each perspective must be the same class.
// constraint: LEM_E_01022=In an association, the active object of each perspective must be the same class.
}
{
	<ASSOCIATION> Identifier() <IS> 
		Description() 
        ActivePerspective() ";"
        PassivePerspective() ";"
        [ AssociationClassDeclaration() ]
	EndIdentifier() ";"
}

void ActivePerspective() : {
// constraint: LEM_E_01017=In an association, the subject of an active perspective must be a class defined in the domain.
// constraint: LEM_E_01018=In an association, the object of an active perspective must be a class defined in the domain.
}
{ ActiveSubject() ActiveVerbClause() Multiplicity() ActiveObject() }

void PassivePerspective() : {
// constraint: LEM_E_01019=In an association, the subject of an passive perspective must be a class defined in the domain.
// constraint: LEM_E_01020=In an association, the object of an passive perspective must be a class defined in the domain.
}
{ ActiveObject() ActiveVerbClause() Multiplicity() ActiveSubject() }

void ActiveSubject() : {}
{ <SIMPLE_IDENTIFIER> }

void ActiveObject() : {}
{ <SIMPLE_IDENTIFIER> }

void ActiveVerbClause() : {}
{ VerbClause() }

void PassiveVerbClause() : {}
{ VerbClause() }

void VerbClause() : {}
{ <STRING_LITERAL> }

/*
void ClassBody() : {}
{
	( AttributeDeclaration() )*
	( EventDeclaration() )*
	( StateDeclaration() )*
	( TransitionDeclaration() )*
}


   Consider declaring the behaviour of a class in a distinct block. 
   This alters the syntax of ClassBody() to ...
*/

void ClassBody() : {}
{
	( AttributeDeclaration() )*
        ( IdentifierDeclaration() )*
	( EventDeclaration() )*
	[ Behaviour() ]
}


void Behaviour() : {}
{
	<BEHAVIOUR> <IS>
		Description()
		( SelfEventDeclaration() )*
		( StateDeclaration() )*
		( TransitionDeclaration() )*
	<END> <BEHAVIOUR> <SEMI>
}

void SelfEventDeclaration() : {}
{
    EventDeclaration()
}

/*
	Note that it allows for the declaration of SelfEvents  which are
	private to the Behaviour block (i.e. not part of the class' public Events

*/


void Generalisation() : {
//constraint: LEM_E_01016=Each relationship must have a unique ID within the domain
}
{
	<GENERALISATION> Identifier() <IS>
		Description() 
        GeneralisationBody() 
	EndIdentifier() ";"
}

/*
    @TODO - the term "is a" is preferable to "is" ...
*/
void GeneralisationBody() : {}
{
	SuperClassIdentifier() "is" 
		SubClassIdentifier() ( "," SubClassIdentifier() )* "or" SubClassIdentifier()  ";"
}

void SuperClassIdentifier() : {
// constraint:LEM_E_01014=The superclass in a generalisation relationship must be an existing class defined in the current domain
}
{ <SIMPLE_IDENTIFIER> }

void SubClassIdentifier() : {
// constraint:LEM_E_01015=All subclasses in a generalisation relationship must be existing classes defined in the current domain
}
{ <SIMPLE_IDENTIFIER> }

void AssociationClassDeclaration() : {}
{ ClassDeclaration() }

/*

@TODO - think about using natural language phrases to represent multiplicities:

    "1..1"  -> one
    "0..1"  -> zero or one
    "0..*"  -> many
    "1..*"  -> at least one

*/
void Multiplicity() : {}
{ ( "1..1" | "0..1" | "0..*" | "1..*" ) }



/***********************************************************************************
 * Event declarations
 ***********************************************************************************/

void EventDeclaration() : {}
{
	[ <SELF> ] <EVENT> Identifier() 
		Description() 
		[ <CARRIES> EventSignature()] <SEMI>
}

/*

   We may need:

void SelfEventDeclaration() : {}
{
	EventDeclaration()
}

*/


void StateSignature() : {}
{ [ Signature() ] }

void EventSignature() : {}
{ Signature() }

void Signature() : {}
{ <LPAREN> ParameterDeclaration() ( <COMMA> ParameterDeclaration() )* <RPAREN> }

void ParameterDeclaration() : {
// constraint: LEM_E_01023=In a parameter declaration, the domain specific data type must be defined in the domain
// constraint: LEM_E_01008=Duplicate parameter identifier. Each parameter must be unique within a signature.
}
{
	Identifier() Description() <IS> Type()
}

/****************************************************************************************
 * State declarations
 ****************************************************************************************/

void StateDeclaration() : {}
{
	/* TODO: move the <IS> to perhaps after the identifier */
    [<DELETION>] <STATE> Identifier()
		Description() 
		StateSignature() <IS>
		Procedure()
    EndIdentifier() <SEMI>
}

void SignalIdentifier() : {}
{ <SIMPLE_IDENTIFIER> }

/*****************************************************************************************
 * State transition definitions
 *****************************************************************************************/

void TransitionDeclaration() : {}
{ 	
	<ON> TransitionEventIdentifier()
		Description()
		<TRANSITION> 
		<FROM> [ <CREATION> <STATE> | FromStateIdentifier() ]
		<TO> ToStateIdentifier() <SEMI>
}

void FromStateIdentifier() : {
// constraint: LEM_E_01010=Transition 'from' State must be defined in enclosing behaviour block.
// constraint: LEM_E_01012=Transition 'from' State must be a non deletion state.
}
{ <SIMPLE_IDENTIFIER> }

void ToStateIdentifier() : {
// constraint: LEM_E_01011=Transition 'to' State must be defined in enclosing behaviour block.
}
{ <SIMPLE_IDENTIFIER> }

void TransitionEventIdentifier() : {}
{ <SIMPLE_IDENTIFIER> }

/*****************************************************************************************
 * Action Language defined here
 *****************************************************************************************/

void Procedure() : {}
{
	[ ActionBlock() ]
}

void ActionBlock() : {}
{
	<LBRACE>
	VariableDeclarationList()
	StatementList()
	<RBRACE>
}

void VariableDeclarationList() : {}
{
	(LOOKAHEAD(VariableDeclaration()) VariableDeclaration())*
}

void VariableDeclaration() : {}
{
//	Type()
	<VAR>
	Identifier()
	<SEMI>
}


void StatementList() : {}
{
	(
		Action()
		| IfStatement()
		| WhileStatement()
		| ActionBlock()
		| ForLoop()
		| Break()
	)*
}

void Action() : {}
{
	(
		ObjectCreation()
		| ObjectDeletion()
		| AttributeAssignment()
		| SignalGeneration()
		| SignalCancel()
                | SelectStatement() 
		| LinkCreation()
	)
	<SEMI>
}

void ObjectReference() : {}
{
	  <SELF>
	| <SIMPLE_IDENTIFIER>
}

/**
 * VariableReference covers local variables within a context,
 * attributes of an object.
 */
void VariableReference() : {}
{
	LOOKAHEAD(2)
	  ObjectReference() <DOT> Identifier()
	| Identifier()
}

void ObjectCreation() : {}  
{
	<CREATE> ClassList()
}	

// ClassList must match at least one class.. is this what we want?
void ClassList() : {}
{
        Identifier() ( <COMMA> Identifier() )*
}

void ObjectDeletion() : {}
{
	<DELETE> ObjectReference()
}

void RelationshipReference() : {}
{
	LOOKAHEAD(2)
	  Identifier() <DOT> ActiveVerbClause()
	| Identifier()
}

void LinkCreation() : {} 
{
	<RELATE> ObjectReference() <TO> ObjectReference() <ACROSS> RelationshipReference() LinkObjectCreation()
}

// Do we assume the link object is of only one class? I think it's a fair assumption.
void LinkObjectCreation() : {}
{
	[<CREATING> Identifier()]
}

void LinkDeletion() : {}
{
	<UNRELATE> ObjectReference() <FROM> ObjectReference() <ACROSS> RelationshipReference()
}

// can we reclassify from a multi class to another multi class?
void ObjectReclassification() : {}
{
	<RECLASSIFY> ObjectReference() <FROM> Identifier() <TO> Identifier()
}

/** Signals */
void SignalGeneration() : {}
{
        <GENERATE>
	SignalIdentifier()
	ParameterList()
	<TO>
	ObjectReference()
	WithDelay()
}

void ParameterList() : {}
{
	[
		<LPAREN>
		Expression()
		(
			<COMMA>
			Expression()
		)*
		<RPAREN>
	]
}

void WithDelay() : {}
{
	[
		<WITH>
		<DELAY>
		Expression()
	]
}

/**
 * TODO: what kind of signals can we cancel? Ones to self only?
 */
void SignalCancel() : {}
{
	<CANCEL>
	SignalIdentifier()
	<TO>
	ObjectReference()
}

/**
 * Statements returning some value
 */
void RValue() : {}
{
	  Expression()
	| ObjectCreation()
}

/**
 * Statements that can be assigned some value
 */
void LValue() : {}
{
	VariableReference()
}

void AttributeAssignment() : {}
{
	LValue() <IS_ASSIGNED> RValue()
}

/**
 * Flow control statements.
 */
void IfStatement() : {}
{
	<IF>
	<LPAREN>
	Expression()
	<RPAREN>
	ActionBlock()
	[
		ElseIfPart()
		| ElsePart()
	]
}

void ElseIfPart() : {}
{
	<ELSEIF>
	<LPAREN>
	Expression()
	<RPAREN>
	ActionBlock()
	[
		ElseIfPart()
		| ElsePart()
	]
}

void ElsePart() : {}
{
	<ELSE>
	ActionBlock()
}

void WhileStatement() : {}
{
	<WHILE>
	<LPAREN>
	Expression()
	<RPAREN>
	ActionBlock()
}

void SelectStatement() : {}
{
    <SELECT>SelectClause() SelectVariable()
    <FROM><INSTANCES><OF>ClassVariable()WhereClause()

}

void SelectVariable(): {}
{
    <SIMPLE_IDENTIFIER>
}

void ClassVariable() : {}
{
    <SIMPLE_IDENTIFIER>
}

void SelectClause() : {}
{
    (<ONE>|<ALL>|<ANY>)
}

void WhereClause() : {}
{
    [<WHERE>( Related() | Selected() ) ]
}

void Related() : {}
{
    ObjectReference()<RELATED><TO>ClassVariable()<ACROSS>RelationshipVariable()
}

void RelationshipVariable() : {}
{
    <SIMPLE_IDENTIFIER>
}

void Selected() : {}
{
    Expression()
}


void ForLoop() : {}
{
	<FOR><EACH>LoopVariable()<IN>VariableSet()
	ActionBlock()	
}

void LoopVariable(): {}
{
	<SIMPLE_IDENTIFIER>
}

void VariableSet() : {}
{
	<SIMPLE_IDENTIFIER>
}

void Break() : {}
{
	<BREAK><SEMI>
}


/**
 * Expressions. These are side-effect free statements returning a value.
 */
void Expression() : {}
{ 
	AndRelation()
	(
		LogicalOr()
		AndRelation()
	)*
}

/* This is kept only to keep BuilderPass2.listToTree() happy */
void LogicalOr() : {}
{
	<LOR>
}

void LogicalAnd() : {}
{
	<LAND>
}

void AndRelation() : {}
{
	Relation()
	(
		LogicalAnd()
		Relation()
	)*
}

void Relation() : {}
{
	SimpleExpression()
	(
		Relational()
		SimpleExpression()
	)*
}

void Relational() : {}
{
	<EQUAL>
	| <NE>
	| <LT>
	| <LE>
	| <GT>
	| <GE>
}

void SimpleExpression() : {}
{
	Term()
	(
		Adding()
		Term()
	)*
}

void Adding() : {}
{
	<PLUS>
	| <MINUS>
}

void Term() : {}
{
	Factor()
	(
		Multiplying()
		Factor()
	)*
}

void Multiplying() : {}
{
	<MULTIPLY>
	| <DIVIDE>
	| <MOD>
}

void Factor() : {}
{
	Unary()
	[
		<EXPON>
		Unary()
	]
}

void UnaryOperator() : {}
{
	(<PLUS> 
	| <MINUS>
	| <LNOT>)
}

void Unary() : {}
{
	[ UnaryOperator() ]
	Primary()
}

void Primary() : {}
{
	Literal()
	| VariableReference()
	| ParenthesizedPrimary()
//	| Expression()
}

void ParenthesizedPrimary() : {}
{
	<LPAREN>
	Expression()
	<RPAREN>
}

