/*
 * LemEventGenerationlEvent.java
 *
 * Created on August 20, 2005, 12:11 PM
 */

package runtime;

import java.util.Collection;
import java.util.LinkedList;
import java.math.BigDecimal;

/**
  * Instances of this event are passed to listeners when a signal is generated.
 * @author thuanseah
 * @see GenerateAction
 */

public class LemEventGenerationEvent extends LemEvent {
    /** 
     * the unique alpha-numeric object id for the object sending the event
     */
    private Integer objectId1 = null;
    
    /**
     * the unique alpha-numeric object id for the object receiving the event
     */
    private Integer objectId2;
    
    /**
     * the unique alpha-numeric identifier for the event
     */
    private Integer eventId;
    
    /** 
     * the event that is sent
     */
    private String eventType;
    
    /**
     * data sent with the event
     */
    Collection eventParameters = new LinkedList();
    
    /**
     * length in millisecond until the event is sent
     */
    private BigDecimal delay = null;
    
    /** Creates a new instance of LemEventGenerationEvent for events without delay */
    public LemEventGenerationEvent(int id1, int id2, int evtid, String type, Collection p) {
        // if signal is not generated by Scenario
        if(id1 > 0)
            objectId1 = new Integer(id1);
        objectId2 = new Integer(id2);
        eventId = new Integer(evtid);
        eventType = type;
        if(p != null)
            eventParameters.addAll(p);
    }
    
    /** Creates a new instance of LemEventGenerationEvent for events with delay */
    public LemEventGenerationEvent(int id1, int id2, int evtid, String type, Collection p, BigDecimal d) {
        // if signal is not generated by Scenario
        if(id1 > 0)
            objectId1 = new Integer(id1);
        objectId2 = new Integer(id2);
        eventId = new Integer(evtid);
        eventType = type;
        if(p != null)
            eventParameters.addAll(p);
        delay = d;
    }    
    
    /**
     * returns the object id of the sender object and null if the signal was generated by Scenario
     * @return an Integer object representing the unique object id of the sender
     */
    public Integer getSenderObjectId() {
        return objectId1;
    }
    
    /**
     * returns the object id of the receiving object
     * @return an Integer object representing the unique object id of the receiever
     */
     public Integer getReceiverObjectId() {
         return objectId2;
     }
    
     /**
      * returns the object id of the event
      * @return an Integer object representing the unique object id of the event
      */
     public Integer getEventId() {
         return eventId;
     }
     
     /**
      * returns the type of event generated
      * @return a String representation of the event type
      */
     public String getEventType() {
         return eventType;
     }
     
     /**
      * returns the data sent with the event
      * @returns a Collection of the data sent with the event
      */
     public Collection getEventParameters() {
        return eventParameters;
     }

     /**
      * returns the delay of the event if any
      * @returns a BigDecimal representation of the delay. Returns null if not present.
      */
     public BigDecimal getEventDelay() {
        return delay;
     }
          
    /**
    * Notify the given listener that this event has occurred.
    * @param listener The listener to notify
    */
    public void notify(LemEventListener listener) {
	listener.eventGenerated(this);
    }    
}
