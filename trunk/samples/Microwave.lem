model TheWorld is "where all things happen"
	domain Cooking is "pleasurable and rewarding"
		subsystem MicrowaveOven is "the quickest way to cook a pie"
			class Oven is
				attribute Voltage "voltage" is numeric;
				attribute Power "power" is numeric;
				attribute Capacity "capacity" is numeric;
				attribute remainingCookingTime is numeric;

				event genesis;
				event startCooking;
				event cancelCooking;
				event cookingPeriodOver;
				event beepingOver;
				event cookingPeriod carries (period is numeric);
				event ovenSafe;
				
				
				behaviour is 
					state AwaitingCookingRequest is {
						objref beeper;
					
						self.remainingCookingTime := 0;
						beeper := select one from instances of Beeper;
						generate stopBeeping to beeper;
					} end;
					
					state AssigningCookingPeriod (period is numeric) is {
						self.remainingCookingTime := period;
					} end;
					
					state SignallingCookingPeriodOver is {
						objref beeper;
						objref light;
						objref turntable;
						objref magnetron;

						beeper := select one from instances of Beeper;
						generate startBeeping to beeper;
						light := select one from instances of Light;
						generate switchOff to light;
						turntable := select one from instances of Turntable;
						generate stop to turntable;
						magnetron := select one from instances of Magnetron;
						generate powerOff to magnetron;
					} end;
					
					state CookingSuspended is {
						self.remainingCookingTime := ovenTimer.timeRemaining;
						cancel cookingPeriodOver to self;
						light := select one from instances of Light;
						generate switchOff to light;
						turntable := select one from instances of Turntable;
						generate stop to turntable;
						magnetron := select one from instances of Magnetron;
						generate powerOff to magnetron;
					} end;
					
					state EnsuringSafeToCook is {
						objref door;

						if(self.remainingCookingTime /= 0){
							door := select one from instances of Door;
							if (door.closed) {
								generate ovenSafe to self;
							}
						}
					} end;
					
					state Cooking is {
						objref light;
						objref turntable;
						objref magnetron;

						generate cookingPeriodOver to self with delay self.remainingCookingTime;
                                                light := select one from instances of Light ;
						generate switchOn to light;
						turntable := select one from instances of Turntable;
						generate spin to turntable;
						magnetron := select one from instances of Magnetron;
						generate powerOn to magnetron;
					} end;
				
					on genesis transition from creation state to AwaitingCookingRequest;
					on cookingPeriod transition from AwaitingCookingRequest to AssigningCookingPeriod;
					on startCooking transition from AssigningCookingPeriod to EnsuringSafeToCook;
					on startCooking transition from EnsuringSafeToCook to EnsuringSafeToCook;
					on startCooking transition from CookingSuspended to EnsuringSafeToCook;
					on cancelCooking transition from CookingSuspended to AwaitingCookingRequest;
					on cancelCooking transition from Cooking to CookingSuspended;
					on cookingPeriodOver transition from Cooking to SignallingCookingPeriodOver;
					on beepingOver transition from SignallingCookingPeriodOver to AwaitingCookingRequest;
					on ovenSafe transition from EnsuringSafeToCook to Cooking;
				end behaviour;
				
			end Oven;
				
			class Door is
				attribute closed "user is safe when door is closed" is boolean;
				event genesis;
				event release;
				event close;
				behaviour is
					state Open "The door is open" is {
						objref oven;
						self.closed := false;
						oven := select one from instances of Oven;
						generate cancelCooking to oven;
						}
					end Open;
					
					state Closed "The door is closed" is {
						self.closed := true;
						}
					end Closed;
					
					on genesis transition from creation state to Closed;
					on release transition from Closed to Open;
					on close transition from Open to Closed;
				end behaviour;
			end Door;
			
			class Magnetron is
				event genesis;
				event powerOn;
				event powerOff;
				behaviour is
					state On "The magnetron is turned on" is {
						print "magnetron, transform!!!";
					}
					end On;
					state Off "The magnetron is turned off" is {
						print "magnetron off";
					}
					end Off;

					on genesis transition from creation state to Off;
					on powerOn transition from Off to On;
					on powerOff transition from On to Off;
				end behaviour;
			end Magnetron;

			class Turntable is
				attribute Size "size" is numeric;
				event genesis;
				event spin;
				event stop;
				behaviour is
					state Stationary "turn plate motor off" is {
						print "there is not a season to turn turn turn";
						}
					end;
					
					state Rotating "turn plate motor on" is {
						print "turn turn turn";
						}
					end;
					on genesis transition from creation state to Stationary;
					on spin transition from Stationary to Rotating;
					on stop transition from Rotating to Stationary;
				end behaviour;
			end Turntable;

			class Light is
				event genesis;
				event switchOn;
				event switchOff;
				behaviour is
					state LightOff "turn light off" is {
						print "light off";
						}
					end;
					
					state LightOn "turn light on" is {
						print "light on";
						}
					end;
					on genesis transition from creation state to LightOff;
					on switchOn transition from LightOff to LightOn;
					on switchOff transition from LightOn to LightOff;
				end behaviour;
			end Light;


			class Beeper is
				attribute beepCount "type" is numeric;
				event genesis;
				event beepOver;
				event pauseOver;
				event startBeeping;
				event stopBeeping;
				event beepingStopped;

				behaviour is
					state AwaitingBeeperRequest is {
						self.beepCount := 0;
					}
					end;

					state Beeping "turn beeper on" is {
						objref oven;
					
						if(self.beepCount < 4) {
							print "beep beep";
							generate beepOver to self with delay 500;
						}
						else {
							generate beepingStopped to self;
							oven := select one from instances of Oven;
							generate beepingOver to oven;
						}
						
						self.beepCount := self.beepCount + 1;
					}
					end;

					state Pause "stop beeping!" is {
						print "no beep";
						generate pauseOver to self with delay 500;
					}
					end;
					
					on genesis transition from creation state to AwaitingBeeperRequest;
					on startBeeping transition from AwaitingBeeperRequest to Beeping;
					on stopBeeping transition from Beeping to AwaitingBeeperRequest ;
					on stopBeeping transition from Pause to AwaitingBeeperRequest ;
					on beepOver transition from Beeping to Pause;
					on pauseOver transition from Pause to Beeping;
					on beepingStopped transition from Beeping to AwaitingBeeperRequest;
				end behaviour;
			end Beeper;
			
			association R1 is "a record of the fact that each Oven has a Beeper" 
				Oven "has" 1..1 Beeper;
				Beeper "indicates completion of cooking by " 1..1 Oven;
			end R1;
			
			association R2 is "a record of the fact that each Oven has a Turntable" 
				Oven "has" 1..1 Turntable;
				Turntable "rotates food cooking by " 1..1 Oven;
			end R2;
			
			association R3 is "a record of the fact that each Oven has a Magnetron"
				Oven "has" 1..1 Magnetron;
				Magnetron "shoots electrons at the food" 1..1 Oven;
			end R3;
			
			association R4 is "a record of the fact that each Oven has a Door"
				Oven "has" 1..1 Door;
				Door "closes the entrance to" 1..1 Oven;
			end R4;
			
			association R5 is "a record of the fact that each Oven has a Light"
				Oven "has" 1..1 Light;
				Light "illuminates the cooking process" 1..1 Oven;
			end R5;
			
		end MicrowaveOven;	


		scenario CookAPie is {
			objref sharehouseOven;
			objref sharehouseBeeper;
			objref sharehouseLight;
			objref sharehouseTurntable;
			objref sharehouseDoor;
			objref sharehouseMagnetron;
				
			sharehouseOven := create Oven;
			sharehouseBeeper := create Beeper;
			sharehouseLight := create Light;
			sharehouseTurntable := create Turntable;
			sharehouseDoor := create Door;
			sharehouseMagnetron := create Magnetron;
				
			relate sharehouseOven to sharehouseBeeper across R1/*."beeps it up"*/;
			relate sharehouseOven to sharehouseLight across R5/*."lights it up"*/;
			relate sharehouseOven to sharehouseTurntable across R2/*."mixes it up"*/;
			relate sharehouseOven to sharehouseDoor across R4/*."opens it up"*/;
			relate sharehouseOven to sharehouseMagnetron across R3/*."heats it up"*/;
			
			generate genesis to sharehouseOven;	
			generate genesis to sharehouseBeeper;
			generate genesis to sharehouseLight;
			generate genesis to sharehouseTurntable;
			generate genesis to sharehouseDoor;
			generate genesis to sharehouseMagnetron;

			generate cookingPeriod( 10000 ) to sharehouseOven with delay 10000;
			generate startCooking to sharehouseOven with delay 15000;
		}

	end Cooking;
end TheWorld;
