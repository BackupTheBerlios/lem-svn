model TestModel is
	domain TestDomain is
		subsystem TestSubsystem is
			class A is
				event Ev1;
				
				behaviour is
					state s1 is
					{
						set myset;
						generate Ev1 to self with delay 1000;
						cancel Ev1 to self;

						myset := select one from instances of A where selected /= self;
						for each myobj in myset
						{
							generate Ev1 to myobj with delay 500;
						}
					}
					end s1;

					state s2 is
					{
						set myset;
						myset := select one from instances of A where selected /= self;
						for each myobj in myset
						{
							generate Ev1 to myobj with delay 2000;
						}
					}
					end s2;
					
					on Ev1 transition from creation state to s1;
					on Ev1 transition from s1 to s2;
					on Ev1 transition from s2 to s1;
				end behaviour;
			end;

			class B is
				attribute attr1 is numeric;
				attribute attr2 is numeric;
			end;

			/////////////////////////////////////////////////////////////////
			// RELATIONSHIPS                                               //  
			/////////////////////////////////////////////////////////////////
		
			association R1 is "a record of the fact that each book has a publisher" 
				A "is active" 0..* B;
                                B "is passive" 1..1 A;
			end R1;

		end TestSubsystem;

		scenario TestSignals is {
			/* Create a signal storm! */
			objref a1;
			objref a2;
			
			a1 := create A;
			a2 := create A;

			/* generate Ev1 to a1; */
			/* generate Ev1 to a2; */
		}

                scenario TestAttributeReadWrite is {
                        objref a1;
                        numeric x;
                        numeric y;
                        y := 20;
                        a1 := create B;
                        x := a1.attr1;
                        a1.attr1 := y;
                        a1.attr2 := a1.attr1;
                }

                scenario TestRelateUnrelate is {
                        objref a1;
                        objref b1;

                        a1 := create A;
                        b1 := create B;
                        relate b1 to a1 across R1."is passive";
                        
                        unrelate b1 from a1 across R1."is passive";
                }

		scenario TestDeletion is {
			/* 
			 * Attempt to invoke a memory/refcount leak or other
			 * problem
			 */
			while (true) {
				objref b;
			
				b := create B;
				delete b;
			}
		}

	end TestDomain;
end TestModel;
