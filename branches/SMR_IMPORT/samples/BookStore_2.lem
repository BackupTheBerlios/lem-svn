// Bookstore model after the example from Mellor & Balcer, pg 83
//
// Reorganise the model to include Sales and Authorship subsystems
// Start experimenting with syntax for state machines
//
// This file is an Executable UML model expressed in the text-based language
// known as LEM (Language for Executable Models)
//
// $Id$
// 
// $Log$
// Revision 1.1  2005/03/15 12:17:16  u3957053
// Initial revision
//
// Revision 1.1  2004/08/23 12:44:58  u2550921
// Sample to demonstrate state machine syntax
//
//

model BookStoreModel is

	"an Executable UML model of the operation of a bookstore.
	
	 This model defines the static objects such as Book, publisher, author and customer
	 and the relationships that exist between these objects.
	 The model does not contain any specification of the dynamic behaviour of the domain.
	 The model currently consists of a single domain know as 'Publications'."
	 
	domain Publications is "concerned with publishers, books, authors and customers"
	
		// declare some domain specific types...
		// by using domain specific data types we allow the domain experts to feel more comfortable
		// with the subject matter being described

		type Money "the root of all evil" is real;
		type IDBN "is used to uniquely identify books" is string;
		type PrintStatus "describes the status of a publication" is (inprint, discontinued);
		
		subsystem Authorship is "concerned with the writing and publishing of books"

			///////////////////////////////////////////////////////////////////////
			// CLASSES															 //
			///////////////////////////////////////////////////////////////////////

			/*
			 * PUBLISHER
			 * =========
			 */
			object Publisher is "a representation of a book publisher"
				name "identifies the publisher" is string;
				address "for service of notices and deliveries" is string;
				website "allows us to place orders online and to 
						lookup stock status and prices" is string;
			end Publisher;
			
			/*
			 * BOOK
			 * ====
			 */
			object Book is "a representation of a book"
				bookNumber "uniquely identifies the book" is ISBN;
				title "appears on the cover of the book" is string;
				subtitle "provides additional information for some books.
						  We regard the subtitle as a simple extension of the 
						  name of the book" is string := "NO SUBTITLE";
				copyright "a notice detailing the owner of the copyright for 
						   the book" is string;
				unitPrice "the price of one copy of the book" is Money;
			end Book;

			/*
			 * AUTHOR
			 * ======
			 */
			object Author is "the writer of one or more books (titles)" 
				authorId "a unique identifier for the author" is arbitrary_id;
				name "identifies the author" is string;
				website "provides useful details about the author. Of course,
						 not all authors have a website" is string;
				email "allows use to communicate via electronic mail" is string;
			end Author;

			/*
			 * MANUSCRIPT
			 * ==========
			 */
			object Manuscript is 
				"a body of written material generated by an author in the hope that
				it will, one day, be accepted by a publisher and be published as a book"

				title "the name of the work under construction" is string;
				body "is the text comprising the work" is string;

				///////////////////////////////////////////////////////////
				// Events
				//////////////////////////////////////////////////////////

				event Draft "adds new material to the end of the manuscript"
					carries ( newText is string );
				event Revise 
					"makes changes to existing material by changing, deleting or
					 replacing material" 
					carries ( startPosition is integer, length is integer, replaceWith is string);
				event Acceptance "the publisher has accepted the manuscript";
				event Abandon "the manuscript has been abandoned by the author";

				///////////////////////////////////////////////////////////
				// States
				//////////////////////////////////////////////////////////

				state Adding 
					"the manuscript is incomplete and is subject to regular
					additions by the author" ( newText is string ) is
						
						// action language goes here
						// action language goes here
						// action language goes here

				end Drafting;

				state Amending 
					"already drafted material is subject to change by the author
					 in response to editorial or personal review" 
					( startPosition is integer, length is integer, replaceWith is string) is 
						
						// action language goes here
						// action language goes here
						// action language goes here

				end Amending;

				state Accepted 
					"the manuscript has been accepted for publication.
					 No futher work is performed by the author" is
						
						// action language goes here
						// celebration code here
						// action language goes here
						// action language goes here

				end Accepted;

				deletion state Abandoned
					"the manuscript is abandonded by the author. The manuscript is
					 discarded" is

					//
					// action language
					// throw it on the fire
					//

				end Abandoned;

				///////////////////////////////////////////////////////////
				// TRANSITIONS
				//////////////////////////////////////////////////////////

				creation to Adding via Draft;
				transition from Adding to Amending via Revise;
				transition from Amending to Adding via Draft;
				transition from Adding to Accepted via Acceptance;
				transition from Amending to Accepted via Acceptance;
				transition from Adding to Abandoned via Abandon;
				transition from Amending to Abandoned via Abandon;

			end Manuscript;
								

			/////////////////////////////////////////////////////////////////
			// RELATIONSHIPS                                               //  
			/////////////////////////////////////////////////////////////////
			
			association R1 is "a record of the fact that each book has a publisher" 
				Publisher "produces and markets" 0..* Book;
				Book "is produced and marketed by" 1..1 Publisher;
			end R1;
			
			association R2 is "a record of the author's special relationship with the book" 
				Author "writes" 1..* Book;
				Book "is written by" 1..1 Author;
			end R2;

			association R4 is "the relationship between the author and a manuscript"
				Author "authors" 1..* Manuscript;
				Manuscript "is authored by" 1..1 Author;
			end R4;
			
		end AuthorShip;


		subsystem Sales is "concerned with book sales"

			///////////////////////////////////////////////////////////////////////
			// CLASSES															 //
			///////////////////////////////////////////////////////////////////////

			/*
			 * CUSTOMER
			 * ========
			 */
			object Customer is "the important person to whom we sell books.
								Customers may be individuals or organisations but
								we do not treat them differently" 
				customerId "a unique identifier for the customer" is arbitrary_id;
				name "identifies the customer" is string;
				email "provides a convenient means of communication with the customer" is string;
			end Customer;

			/////////////////////////////////////////////////////////////////
			// RELATIONSHIPS                                               //  
			/////////////////////////////////////////////////////////////////

			association R3 is "a record of the fact that customer's buy books" 
				Customer "buys" 0..* Book;
				Book "is sold to" 0..* Customer;

				//
				// we use an "association class" to record information about a purchase
				//
				
				object Sale is "a record of the sale of a book to a customer"
					saleDate "records the date of the transaction" is date;
					quantity "of this title (book) sold to the customer" is integer;
					unitPrice "of the book" is Money;
					value "of this sale" is Money;
				end Sale;
				
			end R3;
		end Sales;
			
	end Publications;
end BookStoreModel;
